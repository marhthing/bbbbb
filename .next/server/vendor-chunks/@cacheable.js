"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cacheable";
exports.ids = ["vendor-chunks/@cacheable"];
exports.modules = {

/***/ "(rsc)/./node_modules/@cacheable/node-cache/dist/index.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@cacheable/node-cache/dist/index.cjs ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  NodeCache: () => NodeCache,\n  NodeCacheErrors: () => NodeCacheErrors,\n  NodeCacheStore: () => NodeCacheStore,\n  default: () => index_default\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_cacheable2 = __webpack_require__(/*! cacheable */ \"(rsc)/./node_modules/cacheable/dist/index.cjs\");\nvar import_hookified2 = __webpack_require__(/*! hookified */ \"(rsc)/./node_modules/hookified/dist/node/index.cjs\");\n\n// src/store.ts\nvar import_cacheable = __webpack_require__(/*! cacheable */ \"(rsc)/./node_modules/cacheable/dist/index.cjs\");\nvar import_hookified = __webpack_require__(/*! hookified */ \"(rsc)/./node_modules/hookified/dist/node/index.cjs\");\nvar import_keyv = __webpack_require__(/*! keyv */ \"keyv\");\nvar NodeCacheStore = class extends import_hookified.Hookified {\n  _maxKeys = 0;\n  _cache = new import_cacheable.Cacheable({\n    primary: new import_keyv.Keyv({ store: new import_cacheable.CacheableMemory() })\n  });\n  constructor(options) {\n    super();\n    if (options) {\n      const cacheOptions = {\n        ttl: options.ttl,\n        primary: options.primary,\n        secondary: options.secondary,\n        stats: options.stats ?? true\n      };\n      this._cache = new import_cacheable.Cacheable(cacheOptions);\n      if (options.maxKeys) {\n        this._maxKeys = options.maxKeys;\n      }\n    }\n    this._cache.on(\"error\", (error) => {\n      this.emit(\"error\", error);\n    });\n  }\n  /**\n   * Cacheable instance.\n   * @returns {Cacheable}\n   * @readonly\n   */\n  get cache() {\n    return this._cache;\n  }\n  /**\n   * Time to live in milliseconds.\n   * @returns {number | string | undefined}\n   * @readonly\n   */\n  get ttl() {\n    return this._cache.ttl;\n  }\n  /**\n   * Time to live in milliseconds.\n   * @param {number | string | undefined} ttl\n   */\n  set ttl(ttl) {\n    this._cache.ttl = ttl;\n  }\n  /**\n   * Primary cache store.\n   * @returns {Keyv<T>}\n   * @readonly\n   */\n  get primary() {\n    return this._cache.primary;\n  }\n  /**\n   * Primary cache store.\n   * @param {Keyv<T>} primary\n   */\n  set primary(primary) {\n    this._cache.primary = primary;\n  }\n  /**\n   * Secondary cache store. Learn more about the secondary cache store in the\n   * [cacheable](https://github.com/jaredwray/cacheable/tree/main/packages/cacheable#storage-tiering-and-caching) documentation.\n   * @returns {Keyv<T> | undefined}\n   */\n  get secondary() {\n    return this._cache.secondary;\n  }\n  /**\n   * Secondary cache store. Learn more about the secondary cache store in the\n   * [cacheable](https://github.com/jaredwray/cacheable/tree/main/packages/cacheable#storage-tiering-and-caching) documentation.\n   * @param {Keyv | undefined} secondary\n   */\n  set secondary(secondary) {\n    this._cache.secondary = secondary;\n  }\n  /**\n   * Maximum number of keys to store in the cache. if this is set to a value greater than 0,\n   * the cache will keep track of the number of keys and will not store more than the specified number of keys.\n   * @returns {number}\n   * @readonly\n   */\n  get maxKeys() {\n    return this._maxKeys;\n  }\n  /**\n   * Maximum number of keys to store in the cache. if this is set to a value greater than 0,\n   * the cache will keep track of the number of keys and will not store more than the specified number of keys.\n   * @param {number} maxKeys\n   */\n  set maxKeys(maxKeys) {\n    this._maxKeys = maxKeys;\n    if (this._maxKeys > 0) {\n      this._cache.stats.enabled = true;\n    }\n  }\n  /**\n   * Set a key/value pair in the cache.\n   * @param {string | number} key\n   * @param {T} value\n   * @param {number} [ttl]\n   * @returns {boolean}\n   */\n  async set(key, value, ttl) {\n    if (this._maxKeys > 0) {\n      if (this._cache.stats.count >= this._maxKeys) {\n        return false;\n      }\n    }\n    await this._cache.set(key.toString(), value, ttl);\n    return true;\n  }\n  /**\n   * Set multiple key/value pairs in the cache.\n   * @param {PartialNodeCacheItem[]} list\n   * @returns {void}\n   */\n  async mset(list) {\n    const items = [];\n    for (const item of list) {\n      items.push({\n        key: item.key.toString(),\n        value: item.value,\n        ttl: item.ttl\n      });\n    }\n    await this._cache.setMany(items);\n  }\n  /**\n   * Get a value from the cache.\n   * @param {string | number} key\n   * @returns {any | undefined}\n   */\n  async get(key) {\n    return this._cache.get(key.toString());\n  }\n  /**\n   * Get multiple values from the cache.\n   * @param {Array<string | number>} keys\n   * @returns {Record<string, any | undefined>}\n   */\n  async mget(keys) {\n    const result = {};\n    for (const key of keys) {\n      result[key.toString()] = await this._cache.get(key.toString());\n    }\n    return result;\n  }\n  /**\n   * Delete a key from the cache.\n   * @param {string | number} key\n   * @returns {boolean}\n   */\n  async del(key) {\n    return this._cache.delete(key.toString());\n  }\n  /**\n   * Delete multiple keys from the cache.\n   * @param {Array<string | number>} keys\n   * @returns {boolean}\n   */\n  async mdel(keys) {\n    return this._cache.deleteMany(keys.map((key) => key.toString()));\n  }\n  /**\n   * Clear the cache.\n   * @returns {void}\n   */\n  async clear() {\n    return this._cache.clear();\n  }\n  /**\n   * Check if a key exists in the cache.\n   * @param {string | number} key\n   * @returns {boolean}\n   */\n  async setTtl(key, ttl) {\n    const item = await this._cache.get(key.toString());\n    if (item) {\n      await this._cache.set(key.toString(), item, ttl);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Check if a key exists in the cache. If it does exist it will get the value and delete the item from the cache.\n   * @param {string | number} key\n   * @returns {T | undefined}\n   */\n  async take(key) {\n    return this._cache.take(key.toString());\n  }\n  /**\n   * Disconnect from the cache.\n   * @returns {void}\n   */\n  async disconnect() {\n    await this._cache.disconnect();\n  }\n};\n\n// src/index.ts\nvar NodeCacheErrors = /* @__PURE__ */ ((NodeCacheErrors2) => {\n  NodeCacheErrors2[\"ECACHEFULL\"] = \"Cache max keys amount exceeded\";\n  NodeCacheErrors2[\"EKEYTYPE\"] = \"The key argument has to be of type `string` or `number`. Found: `__key`\";\n  NodeCacheErrors2[\"EKEYSTYPE\"] = \"The keys argument has to be an array.\";\n  NodeCacheErrors2[\"ETTLTYPE\"] = \"The ttl argument has to be a number or a string for shorthand ttl.\";\n  return NodeCacheErrors2;\n})(NodeCacheErrors || {});\nvar NodeCache = class extends import_hookified2.Hookified {\n  options = {\n    stdTTL: 0,\n    checkperiod: 600,\n    useClones: true,\n    deleteOnExpire: true,\n    maxKeys: -1\n  };\n  store = /* @__PURE__ */ new Map();\n  _stats = new import_cacheable2.CacheableStats({ enabled: true });\n  _cacheable = new import_cacheable2.CacheableMemory();\n  intervalId = 0;\n  constructor(options) {\n    super();\n    if (options) {\n      this.options = { ...this.options, ...options };\n    }\n    this.startInterval();\n  }\n  /**\n   * Sets a key value pair. It is possible to define a ttl (in seconds). Returns true on success.\n   * @param {string | number} key - it will convert the key to a string\n   * @param {T} value\n   * @param {number | string} [ttl] - this is in seconds and undefined will use the default ttl\n   * @returns {boolean}\n   */\n  set(key, value, ttl = 0) {\n    if (typeof key !== \"string\" && typeof key !== \"number\") {\n      throw this.createError(\"The key argument has to be of type `string` or `number`. Found: `__key`\" /* EKEYTYPE */, key);\n    }\n    if (ttl && typeof ttl !== \"number\" && typeof ttl !== \"string\") {\n      throw this.createError(\"The ttl argument has to be a number or a string for shorthand ttl.\" /* ETTLTYPE */, this.formatKey(key));\n    }\n    const keyValue = this.formatKey(key);\n    let ttlValue = 0;\n    if (this.options.stdTTL) {\n      ttlValue = this.getExpirationTimestamp(this.options.stdTTL);\n    }\n    if (ttl) {\n      ttlValue = this.getExpirationTimestamp(ttl);\n    }\n    let expirationTimestamp = 0;\n    if (ttlValue && ttlValue > 0) {\n      expirationTimestamp = ttlValue;\n    }\n    if (this.options.maxKeys) {\n      const { maxKeys } = this.options;\n      if (maxKeys > -1 && this.store.size >= maxKeys) {\n        throw this.createError(\"Cache max keys amount exceeded\" /* ECACHEFULL */, this.formatKey(key));\n      }\n    }\n    this.store.set(keyValue, {\n      key: keyValue,\n      value,\n      ttl: expirationTimestamp\n    });\n    this.emit(\"set\", keyValue, value, ttlValue);\n    this._stats.incrementKSize(keyValue);\n    this._stats.incrementVSize(value);\n    this._stats.setCount(this.store.size);\n    return true;\n  }\n  /**\n   * Sets multiple key val pairs. It is possible to define a ttl (seconds). Returns true on success.\n   * @param {PartialNodeCacheItem<T>[]} data an array of key value pairs with optional ttl\n   * @returns {boolean}\n   */\n  mset(data) {\n    if (!Array.isArray(data)) {\n      throw this.createError(\"The keys argument has to be an array.\" /* EKEYSTYPE */);\n    }\n    for (const item of data) {\n      this.set(item.key, item.value, item.ttl);\n    }\n    return true;\n  }\n  /**\n   * Gets a saved value from the cache. Returns a undefined if not found or expired. If the value was found it returns the value.\n   * @param {string | number} key if the key is a number it will convert it to a string\n   * @returns {T} the value or undefined\n   */\n  get(key) {\n    const result = this.store.get(this.formatKey(key));\n    if (result) {\n      if (result.ttl > 0) {\n        if (result.ttl < Date.now()) {\n          if (this.options.deleteOnExpire) {\n            this.del(key);\n          }\n          this._stats.incrementMisses();\n          this.emit(\"expired\", this.formatKey(key), result.value);\n          return void 0;\n        }\n        this._stats.incrementHits();\n        if (this.options.useClones) {\n          return this._cacheable.clone(result.value);\n        }\n        return result.value;\n      }\n      this._stats.incrementHits();\n      if (this.options.useClones) {\n        return this._cacheable.clone(result.value);\n      }\n      return result.value;\n    }\n    this._stats.incrementMisses();\n    return void 0;\n  }\n  /**\n   * Gets multiple saved values from the cache. Returns an empty object {} if not found or expired.\n   * If the value was found it returns an object with the key value pair.\n   * @param {Array<string | number} keys an array of keys\n   * @returns {Record<string, T | undefined>} an object with the key as a property and the value as the value\n   */\n  mget(keys) {\n    const result = {};\n    for (const key of keys) {\n      const value = this.get(key);\n      if (value) {\n        result[this.formatKey(key)] = value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Get the cached value and remove the key from the cache. Equivalent to calling get(key) + del(key).\n   * Useful for implementing single use mechanism such as OTP, where once a value is read it will become obsolete.\n   * @param {string | number} key\n   * @returns {T | undefined} the value or undefined\n   */\n  take(key) {\n    const result = this.get(key);\n    if (result) {\n      this.del(key);\n      if (this.options.useClones) {\n        return this._cacheable.clone(result);\n      }\n      return result;\n    }\n    return void 0;\n  }\n  /**\n   * Delete a key. Returns the number of deleted entries. A delete will never fail.\n   * @param {string | number | Array<string | number>} key if the key is a number it will convert it to a string. if an array is passed it will delete all keys in the array.\n   * @returns {number} if it was successful it will return the count that was deleted\n   */\n  del(key) {\n    if (Array.isArray(key)) {\n      return this.mdel(key);\n    }\n    const result = this.store.get(this.formatKey(key));\n    if (result) {\n      const keyValue = this.formatKey(key);\n      this.store.delete(keyValue);\n      this.emit(\"del\", keyValue, result.value);\n      this._stats.decreaseKSize(keyValue);\n      this._stats.decreaseVSize(result.value);\n      this._stats.setCount(this.store.size);\n      return 1;\n    }\n    return 0;\n  }\n  /**\n   * Delete all keys in Array that exist. Returns the number of deleted entries.\n   * @param {Array<string | number>} keys an array of keys\n   * @returns {number} the count of deleted keys\n   */\n  mdel(keys) {\n    let result = 0;\n    for (const key of keys) {\n      result += this.del(key);\n    }\n    return result;\n  }\n  /**\n   * Redefine the ttl of a key. Returns true if the key has been found and changed.\n   * Otherwise returns false. If the ttl-argument isn't passed the default-TTL will be used.\n   * @param {string | number} key if the key is a number it will convert it to a string\n   * @param {number | string} [ttl] the ttl in seconds if number, or a shorthand string like '1h' for 1 hour\n   * @returns {boolean} true if the key has been found and changed. Otherwise returns false.\n   */\n  ttl(key, ttl) {\n    const result = this.store.get(this.formatKey(key));\n    if (result) {\n      const ttlValue = ttl ?? this.options.stdTTL;\n      result.ttl = this.getExpirationTimestamp(ttlValue);\n      this.store.set(this.formatKey(key), result);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Receive the ttl of a key.\n   * @param {string | number} key if the key is a number it will convert it to a string\n   * @returns {number | undefined} 0 if this key has no ttl, undefined if this key is not in the cache,\n   * a timestamp in ms representing the time at which this key will expire\n   */\n  getTtl(key) {\n    const result = this.store.get(this.formatKey(key));\n    if (result) {\n      if (result.ttl === 0) {\n        return 0;\n      }\n      return result.ttl;\n    }\n    return void 0;\n  }\n  /**\n   * Returns an array of all existing keys. [ \"all\", \"my\", \"keys\", \"foo\", \"bar\" ]\n   * @returns {string[]} an array of all keys\n   */\n  keys() {\n    const result = [];\n    for (const key of this.store.keys()) {\n      result.push(key);\n    }\n    return result;\n  }\n  /**\n   * Returns boolean indicating if the key is cached.\n   * @param {string | number} key if the key is a number it will convert it to a string\n   * @returns {boolean} true if the key is cached\n   */\n  has(key) {\n    return this.store.has(this.formatKey(key));\n  }\n  /**\n   * Gets the stats of the cache\n   * @returns {NodeCacheStats} the stats of the cache\n   */\n  getStats() {\n    const stats = {\n      keys: this._stats.count,\n      hits: this._stats.hits,\n      misses: this._stats.misses,\n      ksize: this._stats.ksize,\n      vsize: this._stats.vsize\n    };\n    return stats;\n  }\n  /**\n   * Flush the whole data.\n   * @returns {void}\n   */\n  flushAll() {\n    this.store.clear();\n    this.flushStats();\n    this.emit(\"flush\");\n  }\n  /**\n   * Flush the stats.\n   * @returns {void}\n   */\n  flushStats() {\n    this._stats = new import_cacheable2.CacheableStats({ enabled: true });\n    this.emit(\"flush_stats\");\n  }\n  /**\n   * Close the cache. This will clear the interval timeout which is set on check period option.\n   * @returns {void}\n   */\n  close() {\n    this.stopInterval();\n  }\n  /**\n   * Get the interval id\n   * @returns {number | NodeJS.Timeout} the interval id\n   */\n  getIntervalId() {\n    return this.intervalId;\n  }\n  formatKey(key) {\n    return key.toString();\n  }\n  getExpirationTimestamp(ttlInSeconds) {\n    if (typeof ttlInSeconds === \"string\") {\n      return (0, import_cacheable2.shorthandToTime)(ttlInSeconds);\n    }\n    const currentTimestamp = Date.now();\n    const ttlInMilliseconds = ttlInSeconds * 1e3;\n    const expirationTimestamp = currentTimestamp + ttlInMilliseconds;\n    return expirationTimestamp;\n  }\n  startInterval() {\n    if (this.options.checkperiod && this.options.checkperiod > 0) {\n      const checkPeriodinSeconds = this.options.checkperiod * 1e3;\n      this.intervalId = setInterval(() => {\n        this.checkData();\n      }, checkPeriodinSeconds).unref();\n      return;\n    }\n    this.intervalId = 0;\n  }\n  checkData() {\n    for (const [key, value] of this.store.entries()) {\n      if (value.ttl > 0 && value.ttl < Date.now()) {\n        if (this.options.deleteOnExpire) {\n          this.del(key);\n        }\n        this.emit(\"expired\", this.formatKey(key), value.value);\n      }\n    }\n  }\n  stopInterval() {\n    if (this.intervalId !== 0) {\n      clearInterval(this.intervalId);\n      this.intervalId = 0;\n    }\n  }\n  createError(errorCode, key) {\n    let error = errorCode;\n    if (key) {\n      error = error.replace(\"__key\", key);\n    }\n    return new Error(error);\n  }\n};\nvar index_default = NodeCache;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cacheable/node-cache/dist/index.cjs\n");

/***/ })

};
;