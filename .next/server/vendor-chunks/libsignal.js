/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/libsignal";
exports.ids = ["vendor-chunks/libsignal"];
exports.modules = {

/***/ "(rsc)/./node_modules/libsignal/index.js":
/*!*****************************************!*\
  !*** ./node_modules/libsignal/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.crypto = __webpack_require__(/*! ./src/crypto */ \"(rsc)/./node_modules/libsignal/src/crypto.js\");\nexports.curve = __webpack_require__(/*! ./src/curve */ \"(rsc)/./node_modules/libsignal/src/curve.js\");\nexports.keyhelper = __webpack_require__(/*! ./src/keyhelper */ \"(rsc)/./node_modules/libsignal/src/keyhelper.js\");\nexports.ProtocolAddress = __webpack_require__(/*! ./src/protocol_address */ \"(rsc)/./node_modules/libsignal/src/protocol_address.js\");\nexports.SessionBuilder = __webpack_require__(/*! ./src/session_builder */ \"(rsc)/./node_modules/libsignal/src/session_builder.js\");\nexports.SessionCipher = __webpack_require__(/*! ./src/session_cipher */ \"(rsc)/./node_modules/libsignal/src/session_cipher.js\");\nexports.SessionRecord = __webpack_require__(/*! ./src/session_record */ \"(rsc)/./node_modules/libsignal/src/session_record.js\");\nObject.assign(exports, __webpack_require__(/*! ./src/errors */ \"(rsc)/./node_modules/libsignal/src/errors.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHdHQUF3QztBQUN4QyxxR0FBc0M7QUFDdEMsaUhBQThDO0FBQzlDLHFJQUEyRDtBQUMzRCxrSUFBeUQ7QUFDekQsK0hBQXVEO0FBQ3ZELCtIQUF1RDtBQUN2RCx1QkFBdUIsbUJBQU8sQ0FBQyxrRUFBYyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbGlic2lnbmFsL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5jcnlwdG8gPSByZXF1aXJlKCcuL3NyYy9jcnlwdG8nKTtcbmV4cG9ydHMuY3VydmUgPSByZXF1aXJlKCcuL3NyYy9jdXJ2ZScpO1xuZXhwb3J0cy5rZXloZWxwZXIgPSByZXF1aXJlKCcuL3NyYy9rZXloZWxwZXInKTtcbmV4cG9ydHMuUHJvdG9jb2xBZGRyZXNzID0gcmVxdWlyZSgnLi9zcmMvcHJvdG9jb2xfYWRkcmVzcycpO1xuZXhwb3J0cy5TZXNzaW9uQnVpbGRlciA9IHJlcXVpcmUoJy4vc3JjL3Nlc3Npb25fYnVpbGRlcicpO1xuZXhwb3J0cy5TZXNzaW9uQ2lwaGVyID0gcmVxdWlyZSgnLi9zcmMvc2Vzc2lvbl9jaXBoZXInKTtcbmV4cG9ydHMuU2Vzc2lvblJlY29yZCA9IHJlcXVpcmUoJy4vc3JjL3Nlc3Npb25fcmVjb3JkJyk7XG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcXVpcmUoJy4vc3JjL2Vycm9ycycpKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/minimal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/minimal.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// minimal library entry point.\r\n\r\n\r\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/index-minimal.js\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL21pbmltYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhO0FBQ2IsOElBQStDIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvbWluaW1hbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtaW5pbWFsIGxpYnJhcnkgZW50cnkgcG9pbnQuXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvaW5kZXgtbWluaW1hbFwiKTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/minimal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/index-minimal.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/index-minimal.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer.js\");\r\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer_buffer.js\");\r\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader.js\");\r\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader_buffer.js\");\r\n\r\n// Utility\r\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/rpc.js\");\r\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/roots.js\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC1taW5pbWFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1CQUFPLENBQUMsc0ZBQVU7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsb0dBQWlCO0FBQ2pELHdCQUF3QixtQkFBTyxDQUFDLHNGQUFVO0FBQzFDLHdCQUF3QixtQkFBTyxDQUFDLG9HQUFpQjtBQUNqRDtBQUNBO0FBQ0Esd0JBQXdCLG1CQUFPLENBQUMsa0dBQWdCO0FBQ2hELHdCQUF3QixtQkFBTyxDQUFDLGdGQUFPO0FBQ3ZDLHdCQUF3QixtQkFBTyxDQUFDLG9GQUFTO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBwcm90b2J1ZiA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogQnVpbGQgdHlwZSwgb25lIG9mIGBcImZ1bGxcImAsIGBcImxpZ2h0XCJgIG9yIGBcIm1pbmltYWxcImAuXHJcbiAqIEBuYW1lIGJ1aWxkXHJcbiAqIEB0eXBlIHtzdHJpbmd9XHJcbiAqIEBjb25zdFxyXG4gKi9cclxucHJvdG9idWYuYnVpbGQgPSBcIm1pbmltYWxcIjtcclxuXHJcbi8vIFNlcmlhbGl6YXRpb25cclxucHJvdG9idWYuV3JpdGVyICAgICAgID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xyXG5wcm90b2J1Zi5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJfYnVmZmVyXCIpO1xyXG5wcm90b2J1Zi5SZWFkZXIgICAgICAgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XHJcbnByb3RvYnVmLkJ1ZmZlclJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlcl9idWZmZXJcIik7XHJcblxyXG4vLyBVdGlsaXR5XHJcbnByb3RvYnVmLnV0aWwgICAgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcclxucHJvdG9idWYucnBjICAgICAgICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xyXG5wcm90b2J1Zi5yb290cyAgICAgICAgPSByZXF1aXJlKFwiLi9yb290c1wiKTtcclxucHJvdG9idWYuY29uZmlndXJlICAgID0gY29uZmlndXJlO1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuLyoqXHJcbiAqIFJlY29uZmlndXJlcyB0aGUgbGlicmFyeSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50LlxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuZnVuY3Rpb24gY29uZmlndXJlKCkge1xyXG4gICAgcHJvdG9idWYuUmVhZGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyUmVhZGVyKTtcclxuICAgIHByb3RvYnVmLnV0aWwuX2NvbmZpZ3VyZSgpO1xyXG59XHJcblxyXG4vLyBTZXQgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudFxyXG5wcm90b2J1Zi5Xcml0ZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJXcml0ZXIpO1xyXG5jb25maWd1cmUoKTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/reader.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Reader;\r\n\r\nvar util      = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader_buffer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/reader_buffer.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader.js\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHNGQUFVO0FBQy9CO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsa0dBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JlYWRlcl9idWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyUmVhZGVyO1xyXG5cclxuLy8gZXh0ZW5kcyBSZWFkZXJcclxudmFyIFJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxuKEJ1ZmZlclJlYWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlYWRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlclJlYWRlcjtcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHJlYWRlciBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxyXG4gKiBAZXh0ZW5kcyBSZWFkZXJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxyXG4gKi9cclxuZnVuY3Rpb24gQnVmZmVyUmVhZGVyKGJ1ZmZlcikge1xyXG4gICAgUmVhZGVyLmNhbGwodGhpcywgYnVmZmVyKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYnVmZmVyLlxyXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxyXG4gICAgICogQHR5cGUge0J1ZmZlcn1cclxuICAgICAqL1xyXG59XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG5pZiAodXRpbC5CdWZmZXIpXHJcbiAgICBCdWZmZXJSZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zbGljZTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcbkJ1ZmZlclJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmdfYnVmZmVyKCkge1xyXG4gICAgdmFyIGxlbiA9IHRoaXMudWludDMyKCk7IC8vIG1vZGlmaWVzIHBvc1xyXG4gICAgcmV0dXJuIHRoaXMuYnVmLnV0ZjhTbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxyXG4gKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnl0ZXNcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/roots.js":
/*!*********************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/roots.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBOYW1lZCByb290cy5cclxuICogVGhpcyBpcyB3aGVyZSBwYmpzIHN0b3JlcyBnZW5lcmF0ZWQgc3RydWN0dXJlcyAodGhlIG9wdGlvbiBgLXIsIC0tcm9vdGAgc3BlY2lmaWVzIGEgbmFtZSkuXHJcbiAqIENhbiBhbHNvIGJlIHVzZWQgbWFudWFsbHkgdG8gbWFrZSByb290cyBhdmFpbGFibGUgYWNjcm9zcyBtb2R1bGVzLlxyXG4gKiBAbmFtZSByb290c1xyXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsUm9vdD59XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIHBianMgLXIgbXlyb290IC1vIGNvbXBpbGVkLmpzIC4uLlxyXG4gKlxyXG4gKiAvLyBpbiBhbm90aGVyIG1vZHVsZTpcclxuICogcmVxdWlyZShcIi4vY29tcGlsZWQuanNcIik7XHJcbiAqXHJcbiAqIC8vIGluIGFueSBzdWJzZXF1ZW50IG1vZHVsZTpcclxuICogdmFyIHJvb3QgPSBwcm90b2J1Zi5yb290c1tcIm15cm9vdFwiXTtcclxuICovXHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/roots.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/rpc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/rpc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/rpc/service.js\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9ycGMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHNCQUFzQjtBQUN2RDtBQUNBLFVBQVU7QUFDVixXQUFXLG1DQUFtQyxZQUFZLElBQUk7QUFDOUQsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsaUJBQWlCO0FBQzVCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsY0FBYztBQUNqRDtBQUNBLFVBQVU7QUFDVixXQUFXLFlBQVk7QUFDdkIsV0FBVyxpQkFBaUI7QUFDNUIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsZ0dBQWUiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL2xpYnNpZ25hbC9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIFN0cmVhbWluZyBSUEMgaGVscGVycy5cclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHJwYyA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogUlBDIGltcGxlbWVudGF0aW9uIHBhc3NlZCB0byB7QGxpbmsgU2VydmljZSNjcmVhdGV9IHBlcmZvcm1pbmcgYSBzZXJ2aWNlIHJlcXVlc3Qgb24gbmV0d29yayBsZXZlbCwgaS5lLiBieSB1dGlsaXppbmcgaHR0cCByZXF1ZXN0cyBvciB3ZWJzb2NrZXRzLlxyXG4gKiBAdHlwZWRlZiBSUENJbXBsXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8TWVzc2FnZTx7fT4sTWVzc2FnZTx7fT4+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2QgYmVpbmcgY2FsbGVkXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gcmVxdWVzdERhdGEgUmVxdWVzdCBkYXRhXHJcbiAqIEBwYXJhbSB7UlBDSW1wbENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBmdW5jdGlvbiBycGNJbXBsKG1ldGhvZCwgcmVxdWVzdERhdGEsIGNhbGxiYWNrKSB7XHJcbiAqICAgICBpZiAocHJvdG9idWYudXRpbC5sY0ZpcnN0KG1ldGhvZC5uYW1lKSAhPT0gXCJteU1ldGhvZFwiKSAvLyBjb21wYXRpYmxlIHdpdGggc3RhdGljIGNvZGVcclxuICogICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggbWV0aG9kXCIpO1xyXG4gKiAgICAgYXN5bmNocm9ub3VzbHlPYnRhaW5BUmVzcG9uc2UocmVxdWVzdERhdGEsIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2VEYXRhKSB7XHJcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZURhdGEpO1xyXG4gKiAgICAgfSk7XHJcbiAqIH1cclxuICovXHJcblxyXG4vKipcclxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBSUENJbXBsfS5cclxuICogQHR5cGVkZWYgUlBDSW1wbENhbGxiYWNrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheXxudWxsfSBbcmVzcG9uc2VdIFJlc3BvbnNlIGRhdGEgb3IgYG51bGxgIHRvIHNpZ25hbCBlbmQgb2Ygc3RyZWFtLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbnJwYy5TZXJ2aWNlID0gcmVxdWlyZShcIi4vcnBjL3NlcnZpY2VcIik7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/rpc/service.js":
/*!***************************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/rpc/service.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Service;\r\n\r\nvar util = __webpack_require__(/*! ../util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/longbits.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/util/longbits.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = LongBits;\r\n\r\nvar util = __webpack_require__(/*! ../util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL2xvbmdiaXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtR0FBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLDZDQUE2QztBQUM3QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL2xvbmdiaXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IExvbmdCaXRzO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cy5cclxuICogQGNsYXNzZGVzYyBIZWxwZXIgY2xhc3MgZm9yIHdvcmtpbmcgd2l0aCB0aGUgbG93IGFuZCBoaWdoIGJpdHMgb2YgYSA2NCBiaXQgdmFsdWUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gTG93IDMyIGJpdHMsIHVuc2lnbmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSBIaWdoIDMyIGJpdHMsIHVuc2lnbmVkXHJcbiAqL1xyXG5mdW5jdGlvbiBMb25nQml0cyhsbywgaGkpIHtcclxuXHJcbiAgICAvLyBub3RlIHRoYXQgdGhlIGNhc3RzIGJlbG93IGFyZSB0aGVvcmV0aWNhbGx5IHVubmVjZXNzYXJ5IGFzIG9mIHRvZGF5LCBidXQgb2xkZXIgc3RhdGljYWxseVxyXG4gICAgLy8gZ2VuZXJhdGVkIGNvbnZlcnRlciBjb2RlIG1pZ2h0IHN0aWxsIGNhbGwgdGhlIGN0b3Igd2l0aCBzaWduZWQgMzJiaXRzLiBrZXB0IGZvciBjb21wYXQuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb3cgYml0cy5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMubG8gPSBsbyA+Pj4gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZ2ggYml0cy5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGkgPSBoaSA+Pj4gMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFplcm8gYml0cy5cclxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcclxuICogQHR5cGUge3V0aWwuTG9uZ0JpdHN9XHJcbiAqL1xyXG52YXIgemVybyA9IExvbmdCaXRzLnplcm8gPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XHJcblxyXG56ZXJvLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xyXG56ZXJvLnp6RW5jb2RlID0gemVyby56ekRlY29kZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcclxuemVyby5sZW5ndGggPSBmdW5jdGlvbigpIHsgcmV0dXJuIDE7IH07XHJcblxyXG4vKipcclxuICogWmVybyBoYXNoLlxyXG4gKiBAbWVtYmVyb2YgdXRpbC5Mb25nQml0c1xyXG4gKiBAdHlwZSB7c3RyaW5nfVxyXG4gKi9cclxudmFyIHplcm9IYXNoID0gTG9uZ0JpdHMuemVyb0hhc2ggPSBcIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWVcclxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEluc3RhbmNlXHJcbiAqL1xyXG5Mb25nQml0cy5mcm9tTnVtYmVyID0gZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09PSAwKVxyXG4gICAgICAgIHJldHVybiB6ZXJvO1xyXG4gICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDA7XHJcbiAgICBpZiAoc2lnbilcclxuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcclxuICAgIHZhciBsbyA9IHZhbHVlID4+PiAwLFxyXG4gICAgICAgIGhpID0gKHZhbHVlIC0gbG8pIC8gNDI5NDk2NzI5NiA+Pj4gMDtcclxuICAgIGlmIChzaWduKSB7XHJcbiAgICAgICAgaGkgPSB+aGkgPj4+IDA7XHJcbiAgICAgICAgbG8gPSB+bG8gPj4+IDA7XHJcbiAgICAgICAgaWYgKCsrbG8gPiA0Mjk0OTY3Mjk1KSB7XHJcbiAgICAgICAgICAgIGxvID0gMDtcclxuICAgICAgICAgICAgaWYgKCsraGkgPiA0Mjk0OTY3Mjk1KVxyXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMobG8sIGhpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSBhIG51bWJlciwgbG9uZyBvciBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZVxyXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcclxuICovXHJcbkxvbmdCaXRzLmZyb20gPSBmdW5jdGlvbiBmcm9tKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgIHJldHVybiBMb25nQml0cy5mcm9tTnVtYmVyKHZhbHVlKTtcclxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgaWYgKHV0aWwuTG9uZylcclxuICAgICAgICAgICAgdmFsdWUgPSB1dGlsLkxvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcihwYXJzZUludCh2YWx1ZSwgMTApKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZS5sb3cgfHwgdmFsdWUuaGlnaCA/IG5ldyBMb25nQml0cyh2YWx1ZS5sb3cgPj4+IDAsIHZhbHVlLmhpZ2ggPj4+IDApIDogemVybztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIHBvc3NpYmx5IHVuc2FmZSBKYXZhU2NyaXB0IG51bWJlci5cclxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvc3NpYmx5IHVuc2FmZSBudW1iZXJcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKHVuc2lnbmVkKSB7XHJcbiAgICBpZiAoIXVuc2lnbmVkICYmIHRoaXMuaGkgPj4+IDMxKSB7XHJcbiAgICAgICAgdmFyIGxvID0gfnRoaXMubG8gKyAxID4+PiAwLFxyXG4gICAgICAgICAgICBoaSA9IH50aGlzLmhpICAgICA+Pj4gMDtcclxuICAgICAgICBpZiAoIWxvKVxyXG4gICAgICAgICAgICBoaSA9IGhpICsgMSA+Pj4gMDtcclxuICAgICAgICByZXR1cm4gLShsbyArIGhpICogNDI5NDk2NzI5Nik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5sbyArIHRoaXMuaGkgKiA0Mjk0OTY3Mjk2O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgbG9uZyBiaXRzIHRvIGEgbG9uZy5cclxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XHJcbiAqIEByZXR1cm5zIHtMb25nfSBMb25nXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUudG9Mb25nID0gZnVuY3Rpb24gdG9Mb25nKHVuc2lnbmVkKSB7XHJcbiAgICByZXR1cm4gdXRpbC5Mb25nXHJcbiAgICAgICAgPyBuZXcgdXRpbC5Mb25nKHRoaXMubG8gfCAwLCB0aGlzLmhpIHwgMCwgQm9vbGVhbih1bnNpZ25lZCkpXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICA6IHsgbG93OiB0aGlzLmxvIHwgMCwgaGlnaDogdGhpcy5oaSB8IDAsIHVuc2lnbmVkOiBCb29sZWFuKHVuc2lnbmVkKSB9O1xyXG59O1xyXG5cclxudmFyIGNoYXJDb2RlQXQgPSBTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQ7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBCaXRzXHJcbiAqL1xyXG5Mb25nQml0cy5mcm9tSGFzaCA9IGZ1bmN0aW9uIGZyb21IYXNoKGhhc2gpIHtcclxuICAgIGlmIChoYXNoID09PSB6ZXJvSGFzaClcclxuICAgICAgICByZXR1cm4gemVybztcclxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMoXHJcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMClcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAxKSA8PCA4XHJcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMikgPDwgMTZcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAzKSA8PCAyNCkgPj4+IDBcclxuICAgICxcclxuICAgICAgICAoIGNoYXJDb2RlQXQuY2FsbChoYXNoLCA0KVxyXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDUpIDw8IDhcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA2KSA8PCAxNlxyXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDcpIDw8IDI0KSA+Pj4gMFxyXG4gICAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIDggY2hhcmFjdGVycyBsb25nIGhhc2guXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEhhc2hcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS50b0hhc2ggPSBmdW5jdGlvbiB0b0hhc2goKSB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShcclxuICAgICAgICB0aGlzLmxvICAgICAgICAmIDI1NSxcclxuICAgICAgICB0aGlzLmxvID4+PiA4ICAmIDI1NSxcclxuICAgICAgICB0aGlzLmxvID4+PiAxNiAmIDI1NSxcclxuICAgICAgICB0aGlzLmxvID4+PiAyNCAgICAgICxcclxuICAgICAgICB0aGlzLmhpICAgICAgICAmIDI1NSxcclxuICAgICAgICB0aGlzLmhpID4+PiA4ICAmIDI1NSxcclxuICAgICAgICB0aGlzLmhpID4+PiAxNiAmIDI1NSxcclxuICAgICAgICB0aGlzLmhpID4+PiAyNFxyXG4gICAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBaaWctemFnIGVuY29kZXMgdGhpcyBsb25nIGJpdHMuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS56ekVuY29kZSA9IGZ1bmN0aW9uIHp6RW5jb2RlKCkge1xyXG4gICAgdmFyIG1hc2sgPSAgIHRoaXMuaGkgPj4gMzE7XHJcbiAgICB0aGlzLmhpICA9ICgodGhpcy5oaSA8PCAxIHwgdGhpcy5sbyA+Pj4gMzEpIF4gbWFzaykgPj4+IDA7XHJcbiAgICB0aGlzLmxvICA9ICggdGhpcy5sbyA8PCAxICAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBaaWctemFnIGRlY29kZXMgdGhpcyBsb25nIGJpdHMuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS56ekRlY29kZSA9IGZ1bmN0aW9uIHp6RGVjb2RlKCkge1xyXG4gICAgdmFyIG1hc2sgPSAtKHRoaXMubG8gJiAxKTtcclxuICAgIHRoaXMubG8gID0gKCh0aGlzLmxvID4+PiAxIHwgdGhpcy5oaSA8PCAzMSkgXiBtYXNrKSA+Pj4gMDtcclxuICAgIHRoaXMuaGkgID0gKCB0aGlzLmhpID4+PiAxICAgICAgICAgICAgICAgICAgXiBtYXNrKSA+Pj4gMDtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGlzIGxvbmdiaXRzIHdoZW4gZW5jb2RlZCBhcyBhIHZhcmludC5cclxuICogQHJldHVybnMge251bWJlcn0gTGVuZ3RoXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKCkge1xyXG4gICAgdmFyIHBhcnQwID0gIHRoaXMubG8sXHJcbiAgICAgICAgcGFydDEgPSAodGhpcy5sbyA+Pj4gMjggfCB0aGlzLmhpIDw8IDQpID4+PiAwLFxyXG4gICAgICAgIHBhcnQyID0gIHRoaXMuaGkgPj4+IDI0O1xyXG4gICAgcmV0dXJuIHBhcnQyID09PSAwXHJcbiAgICAgICAgID8gcGFydDEgPT09IDBcclxuICAgICAgICAgICA/IHBhcnQwIDwgMTYzODRcclxuICAgICAgICAgICAgID8gcGFydDAgPCAxMjggPyAxIDogMlxyXG4gICAgICAgICAgICAgOiBwYXJ0MCA8IDIwOTcxNTIgPyAzIDogNFxyXG4gICAgICAgICAgIDogcGFydDEgPCAxNjM4NFxyXG4gICAgICAgICAgICAgPyBwYXJ0MSA8IDEyOCA/IDUgOiA2XHJcbiAgICAgICAgICAgICA6IHBhcnQxIDwgMjA5NzE1MiA/IDcgOiA4XHJcbiAgICAgICAgIDogcGFydDIgPCAxMjggPyA5IDogMTA7XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js":
/*!****************************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(rsc)/./node_modules/@protobufjs/aspromise/index.js\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"(rsc)/./node_modules/@protobufjs/base64/index.js\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"(rsc)/./node_modules/@protobufjs/eventemitter/index.js\");\r\n\r\n// float handling accross browsers\r\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"(rsc)/./node_modules/@protobufjs/float/index.js\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(rsc)/./node_modules/@protobufjs/inquire/index.js\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"(rsc)/./node_modules/@protobufjs/utf8/index.js\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"(rsc)/./node_modules/@protobufjs/pool/index.js\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/longbits.js\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/writer.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Writer;\r\n\r\nvar util      = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer_buffer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/libsignal/node_modules/protobufjs/src/writer_buffer.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer.js\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/util/minimal.js\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy93cml0ZXJfYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHNGQUFVO0FBQy9CO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsa0dBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGVBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlcl9idWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xyXG5cclxuLy8gZXh0ZW5kcyBXcml0ZXJcclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcclxuKEJ1ZmZlcldyaXRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlcldyaXRlcjtcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxudmFyIEJ1ZmZlciA9IHV0aWwuQnVmZmVyO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHdyaXRlciBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxyXG4gKiBAZXh0ZW5kcyBXcml0ZXJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBCdWZmZXJXcml0ZXIoKSB7XHJcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIEJ1ZmZlciBzaXplXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxyXG4gKi9cclxuQnVmZmVyV3JpdGVyLmFsbG9jID0gZnVuY3Rpb24gYWxsb2NfYnVmZmVyKHNpemUpIHtcclxuICAgIHJldHVybiAoQnVmZmVyV3JpdGVyLmFsbG9jID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlKShzaXplKTtcclxufTtcclxuXHJcbnZhciB3cml0ZUJ5dGVzQnVmZmVyID0gQnVmZmVyICYmIEJ1ZmZlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIEJ1ZmZlci5wcm90b3R5cGUuc2V0Lm5hbWUgPT09IFwic2V0XCJcclxuICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9zZXQodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBmYXN0ZXIgdGhhbiBjb3B5IChyZXF1aXJlcyBub2RlID49IDQgd2hlcmUgQnVmZmVycyBleHRlbmQgVWludDhBcnJheSBhbmQgc2V0IGlzIHByb3Blcmx5IGluaGVyaXRlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyB3b3JrcyBmb3IgcGxhaW4gYXJyYXkgdmFsdWVzXHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgOiBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX2NvcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgIGlmICh2YWwuY29weSkgLy8gQnVmZmVyIHZhbHVlc1xyXG4gICAgICAgICAgICB2YWwuY29weShidWYsIHBvcywgMCwgdmFsLmxlbmd0aCk7XHJcbiAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7KSAvLyBwbGFpbiBhcnJheSB2YWx1ZXNcclxuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xyXG4gICAgfTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiB3cml0ZV9ieXRlc19idWZmZXIodmFsdWUpIHtcclxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSlcclxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcclxuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggPj4+IDA7XHJcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xyXG4gICAgaWYgKGxlbilcclxuICAgICAgICB0aGlzLl9wdXNoKHdyaXRlQnl0ZXNCdWZmZXIsIGxlbiwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB3cml0ZVN0cmluZ0J1ZmZlcih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBpZiAodmFsLmxlbmd0aCA8IDQwKSAvLyBwbGFpbiBqcyBpcyBmYXN0ZXIgZm9yIHNob3J0IHN0cmluZ3MgKHByb2JhYmx5IGR1ZSB0byByZWR1bmRhbnQgYXNzZXJ0aW9ucylcclxuICAgICAgICB1dGlsLnV0Zjgud3JpdGUodmFsLCBidWYsIHBvcyk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgYnVmLnV0ZjhXcml0ZSh2YWwsIHBvcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nX2J1ZmZlcih2YWx1ZSkge1xyXG4gICAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcclxuICAgIHRoaXMudWludDMyKGxlbik7XHJcbiAgICBpZiAobGVuKVxyXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXHJcbiAqIEBuYW1lIEJ1ZmZlcldyaXRlciNmaW5pc2hcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxyXG4gKi9cclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/node_modules/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/WhisperTextProtocol.js":
/*!***********************************************************!*\
  !*** ./node_modules/libsignal/src/WhisperTextProtocol.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/libsignal/node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.textsecure = (function() {\n\n    /**\n     * Namespace textsecure.\n     * @exports textsecure\n     * @namespace\n     */\n    var textsecure = {};\n\n    textsecure.WhisperMessage = (function() {\n\n        /**\n         * Properties of a WhisperMessage.\n         * @memberof textsecure\n         * @interface IWhisperMessage\n         * @property {Uint8Array|null} [ephemeralKey] WhisperMessage ephemeralKey\n         * @property {number|null} [counter] WhisperMessage counter\n         * @property {number|null} [previousCounter] WhisperMessage previousCounter\n         * @property {Uint8Array|null} [ciphertext] WhisperMessage ciphertext\n         */\n\n        /**\n         * Constructs a new WhisperMessage.\n         * @memberof textsecure\n         * @classdesc Represents a WhisperMessage.\n         * @implements IWhisperMessage\n         * @constructor\n         * @param {textsecure.IWhisperMessage=} [properties] Properties to set\n         */\n        function WhisperMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WhisperMessage ephemeralKey.\n         * @member {Uint8Array} ephemeralKey\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.ephemeralKey = $util.newBuffer([]);\n\n        /**\n         * WhisperMessage counter.\n         * @member {number} counter\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.counter = 0;\n\n        /**\n         * WhisperMessage previousCounter.\n         * @member {number} previousCounter\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.previousCounter = 0;\n\n        /**\n         * WhisperMessage ciphertext.\n         * @member {Uint8Array} ciphertext\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         */\n        WhisperMessage.prototype.ciphertext = $util.newBuffer([]);\n\n        /**\n         * Creates a new WhisperMessage instance using the specified properties.\n         * @function create\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.IWhisperMessage=} [properties] Properties to set\n         * @returns {textsecure.WhisperMessage} WhisperMessage instance\n         */\n        WhisperMessage.create = function create(properties) {\n            return new WhisperMessage(properties);\n        };\n\n        /**\n         * Encodes the specified WhisperMessage message. Does not implicitly {@link textsecure.WhisperMessage.verify|verify} messages.\n         * @function encode\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.IWhisperMessage} message WhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WhisperMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ephemeralKey);\n            if (message.counter != null && message.hasOwnProperty(\"counter\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.counter);\n            if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.previousCounter);\n            if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.ciphertext);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WhisperMessage message, length delimited. Does not implicitly {@link textsecure.WhisperMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.IWhisperMessage} message WhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WhisperMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WhisperMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {textsecure.WhisperMessage} WhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WhisperMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.textsecure.WhisperMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.ephemeralKey = reader.bytes();\n                    break;\n                case 2:\n                    message.counter = reader.uint32();\n                    break;\n                case 3:\n                    message.previousCounter = reader.uint32();\n                    break;\n                case 4:\n                    message.ciphertext = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WhisperMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {textsecure.WhisperMessage} WhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WhisperMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WhisperMessage message.\n         * @function verify\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WhisperMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                if (!(message.ephemeralKey && typeof message.ephemeralKey.length === \"number\" || $util.isString(message.ephemeralKey)))\n                    return \"ephemeralKey: buffer expected\";\n            if (message.counter != null && message.hasOwnProperty(\"counter\"))\n                if (!$util.isInteger(message.counter))\n                    return \"counter: integer expected\";\n            if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\"))\n                if (!$util.isInteger(message.previousCounter))\n                    return \"previousCounter: integer expected\";\n            if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\"))\n                if (!(message.ciphertext && typeof message.ciphertext.length === \"number\" || $util.isString(message.ciphertext)))\n                    return \"ciphertext: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a WhisperMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {textsecure.WhisperMessage} WhisperMessage\n         */\n        WhisperMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.textsecure.WhisperMessage)\n                return object;\n            var message = new $root.textsecure.WhisperMessage();\n            if (object.ephemeralKey != null)\n                if (typeof object.ephemeralKey === \"string\")\n                    $util.base64.decode(object.ephemeralKey, message.ephemeralKey = $util.newBuffer($util.base64.length(object.ephemeralKey)), 0);\n                else if (object.ephemeralKey.length)\n                    message.ephemeralKey = object.ephemeralKey;\n            if (object.counter != null)\n                message.counter = object.counter >>> 0;\n            if (object.previousCounter != null)\n                message.previousCounter = object.previousCounter >>> 0;\n            if (object.ciphertext != null)\n                if (typeof object.ciphertext === \"string\")\n                    $util.base64.decode(object.ciphertext, message.ciphertext = $util.newBuffer($util.base64.length(object.ciphertext)), 0);\n                else if (object.ciphertext.length)\n                    message.ciphertext = object.ciphertext;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WhisperMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof textsecure.WhisperMessage\n         * @static\n         * @param {textsecure.WhisperMessage} message WhisperMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WhisperMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.ephemeralKey = \"\";\n                else {\n                    object.ephemeralKey = [];\n                    if (options.bytes !== Array)\n                        object.ephemeralKey = $util.newBuffer(object.ephemeralKey);\n                }\n                object.counter = 0;\n                object.previousCounter = 0;\n                if (options.bytes === String)\n                    object.ciphertext = \"\";\n                else {\n                    object.ciphertext = [];\n                    if (options.bytes !== Array)\n                        object.ciphertext = $util.newBuffer(object.ciphertext);\n                }\n            }\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                object.ephemeralKey = options.bytes === String ? $util.base64.encode(message.ephemeralKey, 0, message.ephemeralKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralKey) : message.ephemeralKey;\n            if (message.counter != null && message.hasOwnProperty(\"counter\"))\n                object.counter = message.counter;\n            if (message.previousCounter != null && message.hasOwnProperty(\"previousCounter\"))\n                object.previousCounter = message.previousCounter;\n            if (message.ciphertext != null && message.hasOwnProperty(\"ciphertext\"))\n                object.ciphertext = options.bytes === String ? $util.base64.encode(message.ciphertext, 0, message.ciphertext.length) : options.bytes === Array ? Array.prototype.slice.call(message.ciphertext) : message.ciphertext;\n            return object;\n        };\n\n        /**\n         * Converts this WhisperMessage to JSON.\n         * @function toJSON\n         * @memberof textsecure.WhisperMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WhisperMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return WhisperMessage;\n    })();\n\n    textsecure.PreKeyWhisperMessage = (function() {\n\n        /**\n         * Properties of a PreKeyWhisperMessage.\n         * @memberof textsecure\n         * @interface IPreKeyWhisperMessage\n         * @property {number|null} [registrationId] PreKeyWhisperMessage registrationId\n         * @property {number|null} [preKeyId] PreKeyWhisperMessage preKeyId\n         * @property {number|null} [signedPreKeyId] PreKeyWhisperMessage signedPreKeyId\n         * @property {Uint8Array|null} [baseKey] PreKeyWhisperMessage baseKey\n         * @property {Uint8Array|null} [identityKey] PreKeyWhisperMessage identityKey\n         * @property {Uint8Array|null} [message] PreKeyWhisperMessage message\n         */\n\n        /**\n         * Constructs a new PreKeyWhisperMessage.\n         * @memberof textsecure\n         * @classdesc Represents a PreKeyWhisperMessage.\n         * @implements IPreKeyWhisperMessage\n         * @constructor\n         * @param {textsecure.IPreKeyWhisperMessage=} [properties] Properties to set\n         */\n        function PreKeyWhisperMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PreKeyWhisperMessage registrationId.\n         * @member {number} registrationId\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.registrationId = 0;\n\n        /**\n         * PreKeyWhisperMessage preKeyId.\n         * @member {number} preKeyId\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.preKeyId = 0;\n\n        /**\n         * PreKeyWhisperMessage signedPreKeyId.\n         * @member {number} signedPreKeyId\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.signedPreKeyId = 0;\n\n        /**\n         * PreKeyWhisperMessage baseKey.\n         * @member {Uint8Array} baseKey\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.baseKey = $util.newBuffer([]);\n\n        /**\n         * PreKeyWhisperMessage identityKey.\n         * @member {Uint8Array} identityKey\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.identityKey = $util.newBuffer([]);\n\n        /**\n         * PreKeyWhisperMessage message.\n         * @member {Uint8Array} message\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         */\n        PreKeyWhisperMessage.prototype.message = $util.newBuffer([]);\n\n        /**\n         * Creates a new PreKeyWhisperMessage instance using the specified properties.\n         * @function create\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.IPreKeyWhisperMessage=} [properties] Properties to set\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage instance\n         */\n        PreKeyWhisperMessage.create = function create(properties) {\n            return new PreKeyWhisperMessage(properties);\n        };\n\n        /**\n         * Encodes the specified PreKeyWhisperMessage message. Does not implicitly {@link textsecure.PreKeyWhisperMessage.verify|verify} messages.\n         * @function encode\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.IPreKeyWhisperMessage} message PreKeyWhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PreKeyWhisperMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.preKeyId);\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.baseKey);\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.identityKey);\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.message);\n            if (message.registrationId != null && message.hasOwnProperty(\"registrationId\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.registrationId);\n            if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.signedPreKeyId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PreKeyWhisperMessage message, length delimited. Does not implicitly {@link textsecure.PreKeyWhisperMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.IPreKeyWhisperMessage} message PreKeyWhisperMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PreKeyWhisperMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PreKeyWhisperMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PreKeyWhisperMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.textsecure.PreKeyWhisperMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 5:\n                    message.registrationId = reader.uint32();\n                    break;\n                case 1:\n                    message.preKeyId = reader.uint32();\n                    break;\n                case 6:\n                    message.signedPreKeyId = reader.uint32();\n                    break;\n                case 2:\n                    message.baseKey = reader.bytes();\n                    break;\n                case 3:\n                    message.identityKey = reader.bytes();\n                    break;\n                case 4:\n                    message.message = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PreKeyWhisperMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PreKeyWhisperMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PreKeyWhisperMessage message.\n         * @function verify\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PreKeyWhisperMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.registrationId != null && message.hasOwnProperty(\"registrationId\"))\n                if (!$util.isInteger(message.registrationId))\n                    return \"registrationId: integer expected\";\n            if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\"))\n                if (!$util.isInteger(message.preKeyId))\n                    return \"preKeyId: integer expected\";\n            if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\"))\n                if (!$util.isInteger(message.signedPreKeyId))\n                    return \"signedPreKeyId: integer expected\";\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                if (!(message.baseKey && typeof message.baseKey.length === \"number\" || $util.isString(message.baseKey)))\n                    return \"baseKey: buffer expected\";\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey)))\n                    return \"identityKey: buffer expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!(message.message && typeof message.message.length === \"number\" || $util.isString(message.message)))\n                    return \"message: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PreKeyWhisperMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {textsecure.PreKeyWhisperMessage} PreKeyWhisperMessage\n         */\n        PreKeyWhisperMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.textsecure.PreKeyWhisperMessage)\n                return object;\n            var message = new $root.textsecure.PreKeyWhisperMessage();\n            if (object.registrationId != null)\n                message.registrationId = object.registrationId >>> 0;\n            if (object.preKeyId != null)\n                message.preKeyId = object.preKeyId >>> 0;\n            if (object.signedPreKeyId != null)\n                message.signedPreKeyId = object.signedPreKeyId >>> 0;\n            if (object.baseKey != null)\n                if (typeof object.baseKey === \"string\")\n                    $util.base64.decode(object.baseKey, message.baseKey = $util.newBuffer($util.base64.length(object.baseKey)), 0);\n                else if (object.baseKey.length)\n                    message.baseKey = object.baseKey;\n            if (object.identityKey != null)\n                if (typeof object.identityKey === \"string\")\n                    $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);\n                else if (object.identityKey.length)\n                    message.identityKey = object.identityKey;\n            if (object.message != null)\n                if (typeof object.message === \"string\")\n                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);\n                else if (object.message.length)\n                    message.message = object.message;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PreKeyWhisperMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @static\n         * @param {textsecure.PreKeyWhisperMessage} message PreKeyWhisperMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PreKeyWhisperMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.preKeyId = 0;\n                if (options.bytes === String)\n                    object.baseKey = \"\";\n                else {\n                    object.baseKey = [];\n                    if (options.bytes !== Array)\n                        object.baseKey = $util.newBuffer(object.baseKey);\n                }\n                if (options.bytes === String)\n                    object.identityKey = \"\";\n                else {\n                    object.identityKey = [];\n                    if (options.bytes !== Array)\n                        object.identityKey = $util.newBuffer(object.identityKey);\n                }\n                if (options.bytes === String)\n                    object.message = \"\";\n                else {\n                    object.message = [];\n                    if (options.bytes !== Array)\n                        object.message = $util.newBuffer(object.message);\n                }\n                object.registrationId = 0;\n                object.signedPreKeyId = 0;\n            }\n            if (message.preKeyId != null && message.hasOwnProperty(\"preKeyId\"))\n                object.preKeyId = message.preKeyId;\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                object.baseKey = options.bytes === String ? $util.base64.encode(message.baseKey, 0, message.baseKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKey) : message.baseKey;\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;\n            if (message.registrationId != null && message.hasOwnProperty(\"registrationId\"))\n                object.registrationId = message.registrationId;\n            if (message.signedPreKeyId != null && message.hasOwnProperty(\"signedPreKeyId\"))\n                object.signedPreKeyId = message.signedPreKeyId;\n            return object;\n        };\n\n        /**\n         * Converts this PreKeyWhisperMessage to JSON.\n         * @function toJSON\n         * @memberof textsecure.PreKeyWhisperMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PreKeyWhisperMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PreKeyWhisperMessage;\n    })();\n\n    textsecure.KeyExchangeMessage = (function() {\n\n        /**\n         * Properties of a KeyExchangeMessage.\n         * @memberof textsecure\n         * @interface IKeyExchangeMessage\n         * @property {number|null} [id] KeyExchangeMessage id\n         * @property {Uint8Array|null} [baseKey] KeyExchangeMessage baseKey\n         * @property {Uint8Array|null} [ephemeralKey] KeyExchangeMessage ephemeralKey\n         * @property {Uint8Array|null} [identityKey] KeyExchangeMessage identityKey\n         * @property {Uint8Array|null} [baseKeySignature] KeyExchangeMessage baseKeySignature\n         */\n\n        /**\n         * Constructs a new KeyExchangeMessage.\n         * @memberof textsecure\n         * @classdesc Represents a KeyExchangeMessage.\n         * @implements IKeyExchangeMessage\n         * @constructor\n         * @param {textsecure.IKeyExchangeMessage=} [properties] Properties to set\n         */\n        function KeyExchangeMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * KeyExchangeMessage id.\n         * @member {number} id\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.id = 0;\n\n        /**\n         * KeyExchangeMessage baseKey.\n         * @member {Uint8Array} baseKey\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.baseKey = $util.newBuffer([]);\n\n        /**\n         * KeyExchangeMessage ephemeralKey.\n         * @member {Uint8Array} ephemeralKey\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.ephemeralKey = $util.newBuffer([]);\n\n        /**\n         * KeyExchangeMessage identityKey.\n         * @member {Uint8Array} identityKey\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.identityKey = $util.newBuffer([]);\n\n        /**\n         * KeyExchangeMessage baseKeySignature.\n         * @member {Uint8Array} baseKeySignature\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         */\n        KeyExchangeMessage.prototype.baseKeySignature = $util.newBuffer([]);\n\n        /**\n         * Creates a new KeyExchangeMessage instance using the specified properties.\n         * @function create\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.IKeyExchangeMessage=} [properties] Properties to set\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage instance\n         */\n        KeyExchangeMessage.create = function create(properties) {\n            return new KeyExchangeMessage(properties);\n        };\n\n        /**\n         * Encodes the specified KeyExchangeMessage message. Does not implicitly {@link textsecure.KeyExchangeMessage.verify|verify} messages.\n         * @function encode\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.IKeyExchangeMessage} message KeyExchangeMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeyExchangeMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.baseKey);\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ephemeralKey);\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.identityKey);\n            if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.baseKeySignature);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified KeyExchangeMessage message, length delimited. Does not implicitly {@link textsecure.KeyExchangeMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.IKeyExchangeMessage} message KeyExchangeMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeyExchangeMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a KeyExchangeMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeyExchangeMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.textsecure.KeyExchangeMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.uint32();\n                    break;\n                case 2:\n                    message.baseKey = reader.bytes();\n                    break;\n                case 3:\n                    message.ephemeralKey = reader.bytes();\n                    break;\n                case 4:\n                    message.identityKey = reader.bytes();\n                    break;\n                case 5:\n                    message.baseKeySignature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a KeyExchangeMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeyExchangeMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a KeyExchangeMessage message.\n         * @function verify\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        KeyExchangeMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isInteger(message.id))\n                    return \"id: integer expected\";\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                if (!(message.baseKey && typeof message.baseKey.length === \"number\" || $util.isString(message.baseKey)))\n                    return \"baseKey: buffer expected\";\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                if (!(message.ephemeralKey && typeof message.ephemeralKey.length === \"number\" || $util.isString(message.ephemeralKey)))\n                    return \"ephemeralKey: buffer expected\";\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                if (!(message.identityKey && typeof message.identityKey.length === \"number\" || $util.isString(message.identityKey)))\n                    return \"identityKey: buffer expected\";\n            if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\"))\n                if (!(message.baseKeySignature && typeof message.baseKeySignature.length === \"number\" || $util.isString(message.baseKeySignature)))\n                    return \"baseKeySignature: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a KeyExchangeMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {textsecure.KeyExchangeMessage} KeyExchangeMessage\n         */\n        KeyExchangeMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.textsecure.KeyExchangeMessage)\n                return object;\n            var message = new $root.textsecure.KeyExchangeMessage();\n            if (object.id != null)\n                message.id = object.id >>> 0;\n            if (object.baseKey != null)\n                if (typeof object.baseKey === \"string\")\n                    $util.base64.decode(object.baseKey, message.baseKey = $util.newBuffer($util.base64.length(object.baseKey)), 0);\n                else if (object.baseKey.length)\n                    message.baseKey = object.baseKey;\n            if (object.ephemeralKey != null)\n                if (typeof object.ephemeralKey === \"string\")\n                    $util.base64.decode(object.ephemeralKey, message.ephemeralKey = $util.newBuffer($util.base64.length(object.ephemeralKey)), 0);\n                else if (object.ephemeralKey.length)\n                    message.ephemeralKey = object.ephemeralKey;\n            if (object.identityKey != null)\n                if (typeof object.identityKey === \"string\")\n                    $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);\n                else if (object.identityKey.length)\n                    message.identityKey = object.identityKey;\n            if (object.baseKeySignature != null)\n                if (typeof object.baseKeySignature === \"string\")\n                    $util.base64.decode(object.baseKeySignature, message.baseKeySignature = $util.newBuffer($util.base64.length(object.baseKeySignature)), 0);\n                else if (object.baseKeySignature.length)\n                    message.baseKeySignature = object.baseKeySignature;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a KeyExchangeMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof textsecure.KeyExchangeMessage\n         * @static\n         * @param {textsecure.KeyExchangeMessage} message KeyExchangeMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        KeyExchangeMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = 0;\n                if (options.bytes === String)\n                    object.baseKey = \"\";\n                else {\n                    object.baseKey = [];\n                    if (options.bytes !== Array)\n                        object.baseKey = $util.newBuffer(object.baseKey);\n                }\n                if (options.bytes === String)\n                    object.ephemeralKey = \"\";\n                else {\n                    object.ephemeralKey = [];\n                    if (options.bytes !== Array)\n                        object.ephemeralKey = $util.newBuffer(object.ephemeralKey);\n                }\n                if (options.bytes === String)\n                    object.identityKey = \"\";\n                else {\n                    object.identityKey = [];\n                    if (options.bytes !== Array)\n                        object.identityKey = $util.newBuffer(object.identityKey);\n                }\n                if (options.bytes === String)\n                    object.baseKeySignature = \"\";\n                else {\n                    object.baseKeySignature = [];\n                    if (options.bytes !== Array)\n                        object.baseKeySignature = $util.newBuffer(object.baseKeySignature);\n                }\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.baseKey != null && message.hasOwnProperty(\"baseKey\"))\n                object.baseKey = options.bytes === String ? $util.base64.encode(message.baseKey, 0, message.baseKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKey) : message.baseKey;\n            if (message.ephemeralKey != null && message.hasOwnProperty(\"ephemeralKey\"))\n                object.ephemeralKey = options.bytes === String ? $util.base64.encode(message.ephemeralKey, 0, message.ephemeralKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralKey) : message.ephemeralKey;\n            if (message.identityKey != null && message.hasOwnProperty(\"identityKey\"))\n                object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;\n            if (message.baseKeySignature != null && message.hasOwnProperty(\"baseKeySignature\"))\n                object.baseKeySignature = options.bytes === String ? $util.base64.encode(message.baseKeySignature, 0, message.baseKeySignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.baseKeySignature) : message.baseKeySignature;\n            return object;\n        };\n\n        /**\n         * Converts this KeyExchangeMessage to JSON.\n         * @function toJSON\n         * @memberof textsecure.KeyExchangeMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        KeyExchangeMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return KeyExchangeMessage;\n    })();\n\n    return textsecure;\n})();\n\nmodule.exports = $root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/WhisperTextProtocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/base_key_type.js":
/*!*****************************************************!*\
  !*** ./node_modules/libsignal/src/base_key_type.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nconst BaseKeyType = {\n  OURS: 1,\n  THEIRS: 2\n};\n\nmodule.exports = BaseKeyType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9iYXNlX2tleV90eXBlLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9iYXNlX2tleV90eXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgQmFzZUtleVR5cGUgPSB7XG4gIE9VUlM6IDEsXG4gIFRIRUlSUzogMlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlS2V5VHlwZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/base_key_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/chain_type.js":
/*!**************************************************!*\
  !*** ./node_modules/libsignal/src/chain_type.js ***!
  \**************************************************/
/***/ ((module) => {

eval("const ChainType = {\n    SENDING: 1,\n    RECEIVING: 2\n};\n\nmodule.exports = ChainType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9jaGFpbl90eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvc3JjL2NoYWluX3R5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2hhaW5UeXBlID0ge1xuICAgIFNFTkRJTkc6IDEsXG4gICAgUkVDRUlWSU5HOiAyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYWluVHlwZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/chain_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/crypto.js":
/*!**********************************************!*\
  !*** ./node_modules/libsignal/src/crypto.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// vim: ts=4:sw=4\n\n\n\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\n\n\nfunction assertBuffer(value) {\n    if (!(value instanceof Buffer)) {\n        throw TypeError(`Expected Buffer instead of: ${value.constructor.name}`);\n    }\n    return value;\n}\n\n\nfunction encrypt(key, data, iv) {\n    assertBuffer(key);\n    assertBuffer(data);\n    assertBuffer(iv);\n    const cipher = nodeCrypto.createCipheriv('aes-256-cbc', key, iv);\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n}\n\n\nfunction decrypt(key, data, iv) {\n    assertBuffer(key);\n    assertBuffer(data);\n    assertBuffer(iv);\n    const decipher = nodeCrypto.createDecipheriv('aes-256-cbc', key, iv);\n    return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\n\nfunction calculateMAC(key, data) {\n    assertBuffer(key);\n    assertBuffer(data);\n    const hmac = nodeCrypto.createHmac('sha256', key);\n    hmac.update(data);\n    return Buffer.from(hmac.digest());\n}\n\n\nfunction hash(data) {\n    assertBuffer(data);\n    const sha512 = nodeCrypto.createHash('sha512');\n    sha512.update(data);\n    return sha512.digest();\n}\n\n\n// Salts always end up being 32 bytes\nfunction deriveSecrets(input, salt, info, chunks) {\n    // Specific implementation of RFC 5869 that only returns the first 3 32-byte chunks\n    assertBuffer(input);\n    assertBuffer(salt);\n    assertBuffer(info);\n    if (salt.byteLength != 32) {\n        throw new Error(\"Got salt of incorrect length\");\n    }\n    chunks = chunks || 3;\n    assert(chunks >= 1 && chunks <= 3);\n    const PRK = calculateMAC(salt, input);\n    const infoArray = new Uint8Array(info.byteLength + 1 + 32);\n    infoArray.set(info, 32);\n    infoArray[infoArray.length - 1] = 1;\n    const signed = [calculateMAC(PRK, Buffer.from(infoArray.slice(32)))];\n    if (chunks > 1) {\n        infoArray.set(signed[signed.length - 1]);\n        infoArray[infoArray.length - 1] = 2;\n        signed.push(calculateMAC(PRK, Buffer.from(infoArray)));\n    }\n    if (chunks > 2) {\n        infoArray.set(signed[signed.length - 1]);\n        infoArray[infoArray.length - 1] = 3;\n        signed.push(calculateMAC(PRK, Buffer.from(infoArray)));\n    }\n    return signed;\n}\n\nfunction verifyMAC(data, key, mac, length) {\n    const calculatedMac = calculateMAC(key, data).slice(0, length);\n    if (mac.length !== length || calculatedMac.length !== length) {\n        throw new Error(\"Bad MAC length\");\n    }\n    if (!mac.equals(calculatedMac)) {\n        throw new Error(\"Bad MAC\");\n    }\n}\n\nmodule.exports = {\n    deriveSecrets,\n    decrypt,\n    encrypt,\n    hash,\n    calculateMAC,\n    verifyMAC\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsc0JBQVE7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLHNCQUFROzs7QUFHL0I7QUFDQTtBQUNBLHVEQUF1RCx1QkFBdUI7QUFDOUU7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvc3JjL2NyeXB0by5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aW06IHRzPTQ6c3c9NFxuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5vZGVDcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG5cbmZ1bmN0aW9uIGFzc2VydEJ1ZmZlcih2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYEV4cGVjdGVkIEJ1ZmZlciBpbnN0ZWFkIG9mOiAke3ZhbHVlLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuXG5mdW5jdGlvbiBlbmNyeXB0KGtleSwgZGF0YSwgaXYpIHtcbiAgICBhc3NlcnRCdWZmZXIoa2V5KTtcbiAgICBhc3NlcnRCdWZmZXIoZGF0YSk7XG4gICAgYXNzZXJ0QnVmZmVyKGl2KTtcbiAgICBjb25zdCBjaXBoZXIgPSBub2RlQ3J5cHRvLmNyZWF0ZUNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpO1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtjaXBoZXIudXBkYXRlKGRhdGEpLCBjaXBoZXIuZmluYWwoKV0pO1xufVxuXG5cbmZ1bmN0aW9uIGRlY3J5cHQoa2V5LCBkYXRhLCBpdikge1xuICAgIGFzc2VydEJ1ZmZlcihrZXkpO1xuICAgIGFzc2VydEJ1ZmZlcihkYXRhKTtcbiAgICBhc3NlcnRCdWZmZXIoaXYpO1xuICAgIGNvbnN0IGRlY2lwaGVyID0gbm9kZUNyeXB0by5jcmVhdGVEZWNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpO1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtkZWNpcGhlci51cGRhdGUoZGF0YSksIGRlY2lwaGVyLmZpbmFsKCldKTtcbn1cblxuXG5mdW5jdGlvbiBjYWxjdWxhdGVNQUMoa2V5LCBkYXRhKSB7XG4gICAgYXNzZXJ0QnVmZmVyKGtleSk7XG4gICAgYXNzZXJ0QnVmZmVyKGRhdGEpO1xuICAgIGNvbnN0IGhtYWMgPSBub2RlQ3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIGtleSk7XG4gICAgaG1hYy51cGRhdGUoZGF0YSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGhtYWMuZGlnZXN0KCkpO1xufVxuXG5cbmZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICAgIGFzc2VydEJ1ZmZlcihkYXRhKTtcbiAgICBjb25zdCBzaGE1MTIgPSBub2RlQ3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTUxMicpO1xuICAgIHNoYTUxMi51cGRhdGUoZGF0YSk7XG4gICAgcmV0dXJuIHNoYTUxMi5kaWdlc3QoKTtcbn1cblxuXG4vLyBTYWx0cyBhbHdheXMgZW5kIHVwIGJlaW5nIDMyIGJ5dGVzXG5mdW5jdGlvbiBkZXJpdmVTZWNyZXRzKGlucHV0LCBzYWx0LCBpbmZvLCBjaHVua3MpIHtcbiAgICAvLyBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBvZiBSRkMgNTg2OSB0aGF0IG9ubHkgcmV0dXJucyB0aGUgZmlyc3QgMyAzMi1ieXRlIGNodW5rc1xuICAgIGFzc2VydEJ1ZmZlcihpbnB1dCk7XG4gICAgYXNzZXJ0QnVmZmVyKHNhbHQpO1xuICAgIGFzc2VydEJ1ZmZlcihpbmZvKTtcbiAgICBpZiAoc2FsdC5ieXRlTGVuZ3RoICE9IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdvdCBzYWx0IG9mIGluY29ycmVjdCBsZW5ndGhcIik7XG4gICAgfVxuICAgIGNodW5rcyA9IGNodW5rcyB8fCAzO1xuICAgIGFzc2VydChjaHVua3MgPj0gMSAmJiBjaHVua3MgPD0gMyk7XG4gICAgY29uc3QgUFJLID0gY2FsY3VsYXRlTUFDKHNhbHQsIGlucHV0KTtcbiAgICBjb25zdCBpbmZvQXJyYXkgPSBuZXcgVWludDhBcnJheShpbmZvLmJ5dGVMZW5ndGggKyAxICsgMzIpO1xuICAgIGluZm9BcnJheS5zZXQoaW5mbywgMzIpO1xuICAgIGluZm9BcnJheVtpbmZvQXJyYXkubGVuZ3RoIC0gMV0gPSAxO1xuICAgIGNvbnN0IHNpZ25lZCA9IFtjYWxjdWxhdGVNQUMoUFJLLCBCdWZmZXIuZnJvbShpbmZvQXJyYXkuc2xpY2UoMzIpKSldO1xuICAgIGlmIChjaHVua3MgPiAxKSB7XG4gICAgICAgIGluZm9BcnJheS5zZXQoc2lnbmVkW3NpZ25lZC5sZW5ndGggLSAxXSk7XG4gICAgICAgIGluZm9BcnJheVtpbmZvQXJyYXkubGVuZ3RoIC0gMV0gPSAyO1xuICAgICAgICBzaWduZWQucHVzaChjYWxjdWxhdGVNQUMoUFJLLCBCdWZmZXIuZnJvbShpbmZvQXJyYXkpKSk7XG4gICAgfVxuICAgIGlmIChjaHVua3MgPiAyKSB7XG4gICAgICAgIGluZm9BcnJheS5zZXQoc2lnbmVkW3NpZ25lZC5sZW5ndGggLSAxXSk7XG4gICAgICAgIGluZm9BcnJheVtpbmZvQXJyYXkubGVuZ3RoIC0gMV0gPSAzO1xuICAgICAgICBzaWduZWQucHVzaChjYWxjdWxhdGVNQUMoUFJLLCBCdWZmZXIuZnJvbShpbmZvQXJyYXkpKSk7XG4gICAgfVxuICAgIHJldHVybiBzaWduZWQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeU1BQyhkYXRhLCBrZXksIG1hYywgbGVuZ3RoKSB7XG4gICAgY29uc3QgY2FsY3VsYXRlZE1hYyA9IGNhbGN1bGF0ZU1BQyhrZXksIGRhdGEpLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgaWYgKG1hYy5sZW5ndGggIT09IGxlbmd0aCB8fCBjYWxjdWxhdGVkTWFjLmxlbmd0aCAhPT0gbGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCBNQUMgbGVuZ3RoXCIpO1xuICAgIH1cbiAgICBpZiAoIW1hYy5lcXVhbHMoY2FsY3VsYXRlZE1hYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIE1BQ1wiKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlcml2ZVNlY3JldHMsXG4gICAgZGVjcnlwdCxcbiAgICBlbmNyeXB0LFxuICAgIGhhc2gsXG4gICAgY2FsY3VsYXRlTUFDLFxuICAgIHZlcmlmeU1BQ1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/curve.js":
/*!*********************************************!*\
  !*** ./node_modules/libsignal/src/curve.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst curveJs = __webpack_require__(/*! curve25519-js */ \"(rsc)/./node_modules/curve25519-js/lib/index.js\");\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\n// from: https://github.com/digitalbazaar/x25519-key-agreement-key-2019/blob/master/lib/crypto.js\nconst PUBLIC_KEY_DER_PREFIX = Buffer.from([\n    48, 42, 48, 5, 6, 3, 43, 101, 110, 3, 33, 0\n]);\n  \nconst PRIVATE_KEY_DER_PREFIX = Buffer.from([\n    48, 46, 2, 1, 0, 48, 5, 6, 3, 43, 101, 110, 4, 34, 4, 32\n]);\n\nconst KEY_BUNDLE_TYPE = Buffer.from([5]);\n\nconst prefixKeyInPublicKey = function (pubKey) {\n  return Buffer.concat([KEY_BUNDLE_TYPE, pubKey]);\n};\n\nfunction validatePrivKey(privKey) {\n    if (privKey === undefined) {\n        throw new Error(\"Undefined private key\");\n    }\n    if (!(privKey instanceof Buffer)) {\n        throw new Error(`Invalid private key type: ${privKey.constructor.name}`);\n    }\n    if (privKey.byteLength != 32) {\n        throw new Error(`Incorrect private key length: ${privKey.byteLength}`);\n    }\n}\n\nfunction scrubPubKeyFormat(pubKey) {\n    if (!(pubKey instanceof Buffer)) {\n        throw new Error(`Invalid public key type: ${pubKey.constructor.name}`);\n    }\n    if (pubKey === undefined || ((pubKey.byteLength != 33 || pubKey[0] != 5) && pubKey.byteLength != 32)) {\n        throw new Error(\"Invalid public key\");\n    }\n    if (pubKey.byteLength == 33) {\n        return pubKey.slice(1);\n    } else {\n        console.error(\"WARNING: Expected pubkey of length 33, please report the ST and client that generated the pubkey\");\n        return pubKey;\n    }\n}\n\nfunction unclampEd25519PrivateKey(clampedSk) {\n    const unclampedSk = new Uint8Array(clampedSk);\n\n    // Fix the first byte\n    unclampedSk[0] |= 6; // Ensure last 3 bits match expected `110` pattern\n\n    // Fix the last byte\n    unclampedSk[31] |= 128; // Restore the highest bit\n    unclampedSk[31] &= ~64; // Clear the second-highest bit\n\n    return unclampedSk;\n}\n\nexports.getPublicFromPrivateKey = function(privKey) {\n    const unclampedPK = unclampEd25519PrivateKey(privKey);\n    const keyPair = curveJs.generateKeyPair(unclampedPK);\n    return prefixKeyInPublicKey(Buffer.from(keyPair.public));\n};\n\nexports.generateKeyPair = function() {\n    try {\n        const {publicKey: publicDerBytes, privateKey: privateDerBytes} = nodeCrypto.generateKeyPairSync(\n            'x25519',\n            {\n                publicKeyEncoding: { format: 'der', type: 'spki' },\n                privateKeyEncoding: { format: 'der', type: 'pkcs8' }\n            }\n        );\n        const pubKey = publicDerBytes.slice(PUBLIC_KEY_DER_PREFIX.length, PUBLIC_KEY_DER_PREFIX.length + 32);\n    \n        const privKey = privateDerBytes.slice(PRIVATE_KEY_DER_PREFIX.length, PRIVATE_KEY_DER_PREFIX.length + 32);\n    \n        return {\n            pubKey: prefixKeyInPublicKey(pubKey),\n            privKey\n        };\n    } catch(e) {\n        const keyPair = curveJs.generateKeyPair(nodeCrypto.randomBytes(32));\n        return {\n            privKey: Buffer.from(keyPair.private),\n            pubKey: prefixKeyInPublicKey(Buffer.from(keyPair.public)),\n        };\n    }\n};\n\nexports.calculateAgreement = function(pubKey, privKey) {\n    pubKey = scrubPubKeyFormat(pubKey);\n    validatePrivKey(privKey);\n    if (!pubKey || pubKey.byteLength != 32) {\n        throw new Error(\"Invalid public key\");\n    }\n\n    if(typeof nodeCrypto.diffieHellman === 'function') {\n        const nodePrivateKey = nodeCrypto.createPrivateKey({\n            key: Buffer.concat([PRIVATE_KEY_DER_PREFIX, privKey]),\n            format: 'der',\n            type: 'pkcs8'\n        });\n        const nodePublicKey = nodeCrypto.createPublicKey({\n            key: Buffer.concat([PUBLIC_KEY_DER_PREFIX, pubKey]),\n            format: 'der',\n            type: 'spki'\n        });\n        \n        return nodeCrypto.diffieHellman({\n            privateKey: nodePrivateKey,\n            publicKey: nodePublicKey,\n        });\n    } else {\n        const secret = curveJs.sharedKey(privKey, pubKey);\n        return Buffer.from(secret);\n    }\n};\n\nexports.calculateSignature = function(privKey, message) {\n    validatePrivKey(privKey);\n    if (!message) {\n        throw new Error(\"Invalid message\");\n    }\n    return Buffer.from(curveJs.sign(privKey, message));\n};\n\nexports.verifySignature = function(pubKey, msg, sig, isInit) {\n    pubKey = scrubPubKeyFormat(pubKey);\n    if (!pubKey || pubKey.byteLength != 32) {\n        throw new Error(\"Invalid public key\");\n    }\n    if (!msg) {\n        throw new Error(\"Invalid message\");\n    }\n    if (!sig || sig.byteLength != 64) {\n        throw new Error(\"Invalid signature\");\n    }\n    return isInit ? true : curveJs.verify(pubKey, msg, sig);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9jdXJ2ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQ2E7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsc0VBQWU7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsc0JBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCx5QkFBeUI7QUFDOUU7QUFDQTtBQUNBLHlEQUF5RCxtQkFBbUI7QUFDNUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0RBQW9ELHdCQUF3QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHlCQUF5Qjs7QUFFekI7QUFDQSw0QkFBNEI7QUFDNUIsNEJBQTRCOztBQUU1QjtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkI7QUFDQSxlQUFlLHdEQUF3RDtBQUN2RTtBQUNBO0FBQ0EscUNBQXFDLDZCQUE2QjtBQUNsRSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvc3JjL2N1cnZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjdXJ2ZUpzID0gcmVxdWlyZSgnY3VydmUyNTUxOS1qcycpO1xuY29uc3Qgbm9kZUNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuLy8gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2RpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMTkvYmxvYi9tYXN0ZXIvbGliL2NyeXB0by5qc1xuY29uc3QgUFVCTElDX0tFWV9ERVJfUFJFRklYID0gQnVmZmVyLmZyb20oW1xuICAgIDQ4LCA0MiwgNDgsIDUsIDYsIDMsIDQzLCAxMDEsIDExMCwgMywgMzMsIDBcbl0pO1xuICBcbmNvbnN0IFBSSVZBVEVfS0VZX0RFUl9QUkVGSVggPSBCdWZmZXIuZnJvbShbXG4gICAgNDgsIDQ2LCAyLCAxLCAwLCA0OCwgNSwgNiwgMywgNDMsIDEwMSwgMTEwLCA0LCAzNCwgNCwgMzJcbl0pO1xuXG5jb25zdCBLRVlfQlVORExFX1RZUEUgPSBCdWZmZXIuZnJvbShbNV0pO1xuXG5jb25zdCBwcmVmaXhLZXlJblB1YmxpY0tleSA9IGZ1bmN0aW9uIChwdWJLZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW0tFWV9CVU5ETEVfVFlQRSwgcHViS2V5XSk7XG59O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByaXZLZXkocHJpdktleSkge1xuICAgIGlmIChwcml2S2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIHByaXZhdGUga2V5XCIpO1xuICAgIH1cbiAgICBpZiAoIShwcml2S2V5IGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcHJpdmF0ZSBrZXkgdHlwZTogJHtwcml2S2V5LmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgfVxuICAgIGlmIChwcml2S2V5LmJ5dGVMZW5ndGggIT0gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmNvcnJlY3QgcHJpdmF0ZSBrZXkgbGVuZ3RoOiAke3ByaXZLZXkuYnl0ZUxlbmd0aH1gKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNjcnViUHViS2V5Rm9ybWF0KHB1YktleSkge1xuICAgIGlmICghKHB1YktleSBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHB1YmxpYyBrZXkgdHlwZTogJHtwdWJLZXkuY29uc3RydWN0b3IubmFtZX1gKTtcbiAgICB9XG4gICAgaWYgKHB1YktleSA9PT0gdW5kZWZpbmVkIHx8ICgocHViS2V5LmJ5dGVMZW5ndGggIT0gMzMgfHwgcHViS2V5WzBdICE9IDUpICYmIHB1YktleS5ieXRlTGVuZ3RoICE9IDMyKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHB1YmxpYyBrZXlcIik7XG4gICAgfVxuICAgIGlmIChwdWJLZXkuYnl0ZUxlbmd0aCA9PSAzMykge1xuICAgICAgICByZXR1cm4gcHViS2V5LnNsaWNlKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXQVJOSU5HOiBFeHBlY3RlZCBwdWJrZXkgb2YgbGVuZ3RoIDMzLCBwbGVhc2UgcmVwb3J0IHRoZSBTVCBhbmQgY2xpZW50IHRoYXQgZ2VuZXJhdGVkIHRoZSBwdWJrZXlcIik7XG4gICAgICAgIHJldHVybiBwdWJLZXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1bmNsYW1wRWQyNTUxOVByaXZhdGVLZXkoY2xhbXBlZFNrKSB7XG4gICAgY29uc3QgdW5jbGFtcGVkU2sgPSBuZXcgVWludDhBcnJheShjbGFtcGVkU2spO1xuXG4gICAgLy8gRml4IHRoZSBmaXJzdCBieXRlXG4gICAgdW5jbGFtcGVkU2tbMF0gfD0gNjsgLy8gRW5zdXJlIGxhc3QgMyBiaXRzIG1hdGNoIGV4cGVjdGVkIGAxMTBgIHBhdHRlcm5cblxuICAgIC8vIEZpeCB0aGUgbGFzdCBieXRlXG4gICAgdW5jbGFtcGVkU2tbMzFdIHw9IDEyODsgLy8gUmVzdG9yZSB0aGUgaGlnaGVzdCBiaXRcbiAgICB1bmNsYW1wZWRTa1szMV0gJj0gfjY0OyAvLyBDbGVhciB0aGUgc2Vjb25kLWhpZ2hlc3QgYml0XG5cbiAgICByZXR1cm4gdW5jbGFtcGVkU2s7XG59XG5cbmV4cG9ydHMuZ2V0UHVibGljRnJvbVByaXZhdGVLZXkgPSBmdW5jdGlvbihwcml2S2V5KSB7XG4gICAgY29uc3QgdW5jbGFtcGVkUEsgPSB1bmNsYW1wRWQyNTUxOVByaXZhdGVLZXkocHJpdktleSk7XG4gICAgY29uc3Qga2V5UGFpciA9IGN1cnZlSnMuZ2VuZXJhdGVLZXlQYWlyKHVuY2xhbXBlZFBLKTtcbiAgICByZXR1cm4gcHJlZml4S2V5SW5QdWJsaWNLZXkoQnVmZmVyLmZyb20oa2V5UGFpci5wdWJsaWMpKTtcbn07XG5cbmV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyID0gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge3B1YmxpY0tleTogcHVibGljRGVyQnl0ZXMsIHByaXZhdGVLZXk6IHByaXZhdGVEZXJCeXRlc30gPSBub2RlQ3J5cHRvLmdlbmVyYXRlS2V5UGFpclN5bmMoXG4gICAgICAgICAgICAneDI1NTE5JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXlFbmNvZGluZzogeyBmb3JtYXQ6ICdkZXInLCB0eXBlOiAnc3BraScgfSxcbiAgICAgICAgICAgICAgICBwcml2YXRlS2V5RW5jb2Rpbmc6IHsgZm9ybWF0OiAnZGVyJywgdHlwZTogJ3BrY3M4JyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHB1YktleSA9IHB1YmxpY0RlckJ5dGVzLnNsaWNlKFBVQkxJQ19LRVlfREVSX1BSRUZJWC5sZW5ndGgsIFBVQkxJQ19LRVlfREVSX1BSRUZJWC5sZW5ndGggKyAzMik7XG4gICAgXG4gICAgICAgIGNvbnN0IHByaXZLZXkgPSBwcml2YXRlRGVyQnl0ZXMuc2xpY2UoUFJJVkFURV9LRVlfREVSX1BSRUZJWC5sZW5ndGgsIFBSSVZBVEVfS0VZX0RFUl9QUkVGSVgubGVuZ3RoICsgMzIpO1xuICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHViS2V5OiBwcmVmaXhLZXlJblB1YmxpY0tleShwdWJLZXkpLFxuICAgICAgICAgICAgcHJpdktleVxuICAgICAgICB9O1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBjb25zdCBrZXlQYWlyID0gY3VydmVKcy5nZW5lcmF0ZUtleVBhaXIobm9kZUNyeXB0by5yYW5kb21CeXRlcygzMikpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJpdktleTogQnVmZmVyLmZyb20oa2V5UGFpci5wcml2YXRlKSxcbiAgICAgICAgICAgIHB1YktleTogcHJlZml4S2V5SW5QdWJsaWNLZXkoQnVmZmVyLmZyb20oa2V5UGFpci5wdWJsaWMpKSxcbiAgICAgICAgfTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmNhbGN1bGF0ZUFncmVlbWVudCA9IGZ1bmN0aW9uKHB1YktleSwgcHJpdktleSkge1xuICAgIHB1YktleSA9IHNjcnViUHViS2V5Rm9ybWF0KHB1YktleSk7XG4gICAgdmFsaWRhdGVQcml2S2V5KHByaXZLZXkpO1xuICAgIGlmICghcHViS2V5IHx8IHB1YktleS5ieXRlTGVuZ3RoICE9IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHVibGljIGtleVwiKTtcbiAgICB9XG5cbiAgICBpZih0eXBlb2Ygbm9kZUNyeXB0by5kaWZmaWVIZWxsbWFuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IG5vZGVQcml2YXRlS2V5ID0gbm9kZUNyeXB0by5jcmVhdGVQcml2YXRlS2V5KHtcbiAgICAgICAgICAgIGtleTogQnVmZmVyLmNvbmNhdChbUFJJVkFURV9LRVlfREVSX1BSRUZJWCwgcHJpdktleV0pLFxuICAgICAgICAgICAgZm9ybWF0OiAnZGVyJyxcbiAgICAgICAgICAgIHR5cGU6ICdwa2NzOCdcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG5vZGVQdWJsaWNLZXkgPSBub2RlQ3J5cHRvLmNyZWF0ZVB1YmxpY0tleSh7XG4gICAgICAgICAgICBrZXk6IEJ1ZmZlci5jb25jYXQoW1BVQkxJQ19LRVlfREVSX1BSRUZJWCwgcHViS2V5XSksXG4gICAgICAgICAgICBmb3JtYXQ6ICdkZXInLFxuICAgICAgICAgICAgdHlwZTogJ3Nwa2knXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5vZGVDcnlwdG8uZGlmZmllSGVsbG1hbih7XG4gICAgICAgICAgICBwcml2YXRlS2V5OiBub2RlUHJpdmF0ZUtleSxcbiAgICAgICAgICAgIHB1YmxpY0tleTogbm9kZVB1YmxpY0tleSxcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2VjcmV0ID0gY3VydmVKcy5zaGFyZWRLZXkocHJpdktleSwgcHViS2V5KTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNlY3JldCk7XG4gICAgfVxufTtcblxuZXhwb3J0cy5jYWxjdWxhdGVTaWduYXR1cmUgPSBmdW5jdGlvbihwcml2S2V5LCBtZXNzYWdlKSB7XG4gICAgdmFsaWRhdGVQcml2S2V5KHByaXZLZXkpO1xuICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2VcIik7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShjdXJ2ZUpzLnNpZ24ocHJpdktleSwgbWVzc2FnZSkpO1xufTtcblxuZXhwb3J0cy52ZXJpZnlTaWduYXR1cmUgPSBmdW5jdGlvbihwdWJLZXksIG1zZywgc2lnLCBpc0luaXQpIHtcbiAgICBwdWJLZXkgPSBzY3J1YlB1YktleUZvcm1hdChwdWJLZXkpO1xuICAgIGlmICghcHViS2V5IHx8IHB1YktleS5ieXRlTGVuZ3RoICE9IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHVibGljIGtleVwiKTtcbiAgICB9XG4gICAgaWYgKCFtc2cpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBtZXNzYWdlXCIpO1xuICAgIH1cbiAgICBpZiAoIXNpZyB8fCBzaWcuYnl0ZUxlbmd0aCAhPSA2NCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNpZ25hdHVyZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzSW5pdCA/IHRydWUgOiBjdXJ2ZUpzLnZlcmlmeShwdWJLZXksIG1zZywgc2lnKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/errors.js":
/*!**********************************************!*\
  !*** ./node_modules/libsignal/src/errors.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// vim: ts=4:sw=4:expandtab\n\nexports.SignalError = class SignalError extends Error {};\n\nexports.UntrustedIdentityKeyError = class UntrustedIdentityKeyError extends exports.SignalError {\n    constructor(addr, identityKey) {\n        super();\n        this.name = 'UntrustedIdentityKeyError';\n        this.addr = addr;\n        this.identityKey = identityKey;\n    }\n};\n\nexports.SessionError = class SessionError extends exports.SignalError {\n    constructor(message) {\n        super(message);\n        this.name = 'SessionError';\n    }\n};\n\nexports.MessageCounterError = class MessageCounterError extends exports.SessionError {\n    constructor(message) {\n        super(message);\n        this.name = 'MessageCounterError';\n    }\n};\n\nexports.PreKeyError = class PreKeyError extends exports.SessionError {\n    constructor(message) {\n        super(message);\n        this.name = 'PreKeyError';\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsbUJBQW1COztBQUVuQixpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL2xpYnNpZ25hbC9zcmMvZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZpbTogdHM9NDpzdz00OmV4cGFuZHRhYlxuXG5leHBvcnRzLlNpZ25hbEVycm9yID0gY2xhc3MgU2lnbmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7fTtcblxuZXhwb3J0cy5VbnRydXN0ZWRJZGVudGl0eUtleUVycm9yID0gY2xhc3MgVW50cnVzdGVkSWRlbnRpdHlLZXlFcnJvciBleHRlbmRzIGV4cG9ydHMuU2lnbmFsRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGFkZHIsIGlkZW50aXR5S2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnRydXN0ZWRJZGVudGl0eUtleUVycm9yJztcbiAgICAgICAgdGhpcy5hZGRyID0gYWRkcjtcbiAgICAgICAgdGhpcy5pZGVudGl0eUtleSA9IGlkZW50aXR5S2V5O1xuICAgIH1cbn07XG5cbmV4cG9ydHMuU2Vzc2lvbkVycm9yID0gY2xhc3MgU2Vzc2lvbkVycm9yIGV4dGVuZHMgZXhwb3J0cy5TaWduYWxFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Nlc3Npb25FcnJvcic7XG4gICAgfVxufTtcblxuZXhwb3J0cy5NZXNzYWdlQ291bnRlckVycm9yID0gY2xhc3MgTWVzc2FnZUNvdW50ZXJFcnJvciBleHRlbmRzIGV4cG9ydHMuU2Vzc2lvbkVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTWVzc2FnZUNvdW50ZXJFcnJvcic7XG4gICAgfVxufTtcblxuZXhwb3J0cy5QcmVLZXlFcnJvciA9IGNsYXNzIFByZUtleUVycm9yIGV4dGVuZHMgZXhwb3J0cy5TZXNzaW9uRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdQcmVLZXlFcnJvcic7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/keyhelper.js":
/*!*************************************************!*\
  !*** ./node_modules/libsignal/src/keyhelper.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// vim: ts=4:sw=4:expandtab\n\nconst curve = __webpack_require__(/*! ./curve */ \"(rsc)/./node_modules/libsignal/src/curve.js\");\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nfunction isNonNegativeInteger(n) {\n    return (typeof n === 'number' && (n % 1) === 0  && n >= 0);\n}\n\nexports.generateIdentityKeyPair = curve.generateKeyPair;\n\nexports.generateRegistrationId = function() {\n    var registrationId = Uint16Array.from(nodeCrypto.randomBytes(2))[0];\n    return registrationId & 0x3fff;\n};\n\nexports.generateSignedPreKey = function(identityKeyPair, signedKeyId) {\n    if (!(identityKeyPair.privKey instanceof Buffer) ||\n        identityKeyPair.privKey.byteLength != 32 ||\n        !(identityKeyPair.pubKey instanceof Buffer) ||\n        identityKeyPair.pubKey.byteLength != 33) {\n        throw new TypeError('Invalid argument for identityKeyPair');\n    }\n    if (!isNonNegativeInteger(signedKeyId)) {\n        throw new TypeError('Invalid argument for signedKeyId: ' + signedKeyId);\n    }\n    const keyPair = curve.generateKeyPair();\n    const sig = curve.calculateSignature(identityKeyPair.privKey, keyPair.pubKey);\n    return {\n        keyId: signedKeyId,\n        keyPair: keyPair,\n        signature: sig\n    };\n};\n\nexports.generatePreKey = function(keyId) {\n    if (!isNonNegativeInteger(keyId)) {\n        throw new TypeError('Invalid argument for keyId: ' + keyId);\n    }\n    const keyPair = curve.generateKeyPair();\n    return {\n        keyId,\n        keyPair\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9rZXloZWxwZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLDREQUFTO0FBQy9CLG1CQUFtQixtQkFBTyxDQUFDLHNCQUFROztBQUVuQztBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQiw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBOztBQUVBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL2xpYnNpZ25hbC9zcmMva2V5aGVscGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZpbTogdHM9NDpzdz00OmV4cGFuZHRhYlxuXG5jb25zdCBjdXJ2ZSA9IHJlcXVpcmUoJy4vY3VydmUnKTtcbmNvbnN0IG5vZGVDcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuZnVuY3Rpb24gaXNOb25OZWdhdGl2ZUludGVnZXIobikge1xuICAgIHJldHVybiAodHlwZW9mIG4gPT09ICdudW1iZXInICYmIChuICUgMSkgPT09IDAgICYmIG4gPj0gMCk7XG59XG5cbmV4cG9ydHMuZ2VuZXJhdGVJZGVudGl0eUtleVBhaXIgPSBjdXJ2ZS5nZW5lcmF0ZUtleVBhaXI7XG5cbmV4cG9ydHMuZ2VuZXJhdGVSZWdpc3RyYXRpb25JZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWdpc3RyYXRpb25JZCA9IFVpbnQxNkFycmF5LmZyb20obm9kZUNyeXB0by5yYW5kb21CeXRlcygyKSlbMF07XG4gICAgcmV0dXJuIHJlZ2lzdHJhdGlvbklkICYgMHgzZmZmO1xufTtcblxuZXhwb3J0cy5nZW5lcmF0ZVNpZ25lZFByZUtleSA9IGZ1bmN0aW9uKGlkZW50aXR5S2V5UGFpciwgc2lnbmVkS2V5SWQpIHtcbiAgICBpZiAoIShpZGVudGl0eUtleVBhaXIucHJpdktleSBpbnN0YW5jZW9mIEJ1ZmZlcikgfHxcbiAgICAgICAgaWRlbnRpdHlLZXlQYWlyLnByaXZLZXkuYnl0ZUxlbmd0aCAhPSAzMiB8fFxuICAgICAgICAhKGlkZW50aXR5S2V5UGFpci5wdWJLZXkgaW5zdGFuY2VvZiBCdWZmZXIpIHx8XG4gICAgICAgIGlkZW50aXR5S2V5UGFpci5wdWJLZXkuYnl0ZUxlbmd0aCAhPSAzMykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IGZvciBpZGVudGl0eUtleVBhaXInKTtcbiAgICB9XG4gICAgaWYgKCFpc05vbk5lZ2F0aXZlSW50ZWdlcihzaWduZWRLZXlJZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhcmd1bWVudCBmb3Igc2lnbmVkS2V5SWQ6ICcgKyBzaWduZWRLZXlJZCk7XG4gICAgfVxuICAgIGNvbnN0IGtleVBhaXIgPSBjdXJ2ZS5nZW5lcmF0ZUtleVBhaXIoKTtcbiAgICBjb25zdCBzaWcgPSBjdXJ2ZS5jYWxjdWxhdGVTaWduYXR1cmUoaWRlbnRpdHlLZXlQYWlyLnByaXZLZXksIGtleVBhaXIucHViS2V5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBrZXlJZDogc2lnbmVkS2V5SWQsXG4gICAgICAgIGtleVBhaXI6IGtleVBhaXIsXG4gICAgICAgIHNpZ25hdHVyZTogc2lnXG4gICAgfTtcbn07XG5cbmV4cG9ydHMuZ2VuZXJhdGVQcmVLZXkgPSBmdW5jdGlvbihrZXlJZCkge1xuICAgIGlmICghaXNOb25OZWdhdGl2ZUludGVnZXIoa2V5SWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgZm9yIGtleUlkOiAnICsga2V5SWQpO1xuICAgIH1cbiAgICBjb25zdCBrZXlQYWlyID0gY3VydmUuZ2VuZXJhdGVLZXlQYWlyKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5SWQsXG4gICAgICAgIGtleVBhaXJcbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/keyhelper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/protobufs.js":
/*!*************************************************!*\
  !*** ./node_modules/libsignal/src/protobufs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n    textsecure: {\n        WhisperMessage,\n        PreKeyWhisperMessage\n    }\n} = __webpack_require__(/*! ./WhisperTextProtocol.js */ \"(rsc)/./node_modules/libsignal/src/WhisperTextProtocol.js\");\n\nmodule.exports = { WhisperMessage, PreKeyWhisperMessage };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9wcm90b2J1ZnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDJGQUEwQjs7QUFFdEMsbUJBQW1CIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvc3JjL3Byb3RvYnVmcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHtcbiAgICB0ZXh0c2VjdXJlOiB7XG4gICAgICAgIFdoaXNwZXJNZXNzYWdlLFxuICAgICAgICBQcmVLZXlXaGlzcGVyTWVzc2FnZVxuICAgIH1cbn0gPSByZXF1aXJlKCcuL1doaXNwZXJUZXh0UHJvdG9jb2wuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFdoaXNwZXJNZXNzYWdlLCBQcmVLZXlXaGlzcGVyTWVzc2FnZSB9OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/protobufs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/protocol_address.js":
/*!********************************************************!*\
  !*** ./node_modules/libsignal/src/protocol_address.js ***!
  \********************************************************/
/***/ ((module) => {

eval("// vim: ts=4:sw=4:expandtab\n\n\nclass ProtocolAddress {\n\n    static from(encodedAddress) {\n        if (typeof encodedAddress !== 'string' || !encodedAddress.match(/.*\\.\\d+/)) {\n            throw new Error('Invalid address encoding');\n        }\n        const parts = encodedAddress.split('.');\n        return new this(parts[0], parseInt(parts[1]));\n    }\n\n    constructor(id, deviceId) {\n        if (typeof id !== 'string') {\n            throw new TypeError('id required for addr');\n        }\n        if (id.indexOf('.') !== -1) {\n            throw new TypeError('encoded addr detected');\n        }\n        this.id = id;\n        if (typeof deviceId !== 'number') {\n            throw new TypeError('number required for deviceId');\n        }\n        this.deviceId = deviceId;\n    }\n\n    toString() {\n        return `${this.id}.${this.deviceId}`;\n    }\n\n    is(other) {\n        if (!(other instanceof ProtocolAddress)) {\n            return false;\n        }\n        return other.id === this.id && other.deviceId === this.deviceId;\n    }\n}\n\nmodule.exports = ProtocolAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9wcm90b2NvbF9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixRQUFRLEdBQUcsY0FBYztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9wcm90b2NvbF9hZGRyZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZpbTogdHM9NDpzdz00OmV4cGFuZHRhYlxuXG5cbmNsYXNzIFByb3RvY29sQWRkcmVzcyB7XG5cbiAgICBzdGF0aWMgZnJvbShlbmNvZGVkQWRkcmVzcykge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kZWRBZGRyZXNzICE9PSAnc3RyaW5nJyB8fCAhZW5jb2RlZEFkZHJlc3MubWF0Y2goLy4qXFwuXFxkKy8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkcmVzcyBlbmNvZGluZycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZW5jb2RlZEFkZHJlc3Muc3BsaXQoJy4nKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHBhcnRzWzBdLCBwYXJzZUludChwYXJ0c1sxXSkpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGlkLCBkZXZpY2VJZCkge1xuICAgICAgICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaWQgcmVxdWlyZWQgZm9yIGFkZHInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQuaW5kZXhPZignLicpICE9PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RlZCBhZGRyIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICBpZiAodHlwZW9mIGRldmljZUlkICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbnVtYmVyIHJlcXVpcmVkIGZvciBkZXZpY2VJZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGV2aWNlSWQgPSBkZXZpY2VJZDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuaWR9LiR7dGhpcy5kZXZpY2VJZH1gO1xuICAgIH1cblxuICAgIGlzKG90aGVyKSB7XG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgUHJvdG9jb2xBZGRyZXNzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdGhlci5pZCA9PT0gdGhpcy5pZCAmJiBvdGhlci5kZXZpY2VJZCA9PT0gdGhpcy5kZXZpY2VJZDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvdG9jb2xBZGRyZXNzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/protocol_address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/queue_job.js":
/*!*************************************************!*\
  !*** ./node_modules/libsignal/src/queue_job.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("// vim: ts=4:sw=4:expandtab\n \n /*\n  * jobQueue manages multiple queues indexed by device to serialize\n  * session io ops on the database.\n  */\n\n\n\nconst _queueAsyncBuckets = new Map();\nconst _gcLimit = 10000;\n\nasync function _asyncQueueExecutor(queue, cleanup) {\n    let offt = 0;\n    while (true) {\n        let limit = Math.min(queue.length, _gcLimit); // Break up thundering hurds for GC duty.\n        for (let i = offt; i < limit; i++) {\n            const job = queue[i];\n            try {\n                job.resolve(await job.awaitable());\n            } catch(e) {\n                job.reject(e);\n            }\n        }\n        if (limit < queue.length) {\n            /* Perform lazy GC of queue for faster iteration. */\n            if (limit >= _gcLimit) {\n                queue.splice(0, limit);\n                offt = 0;\n            } else {\n                offt = limit;\n            }\n        } else {\n            break;\n        }\n    }\n    cleanup();\n}\n\nmodule.exports = function(bucket, awaitable) {\n    /* Run the async awaitable only when all other async calls registered\n     * here have completed (or thrown).  The bucket argument is a hashable\n     * key representing the task queue to use. */\n    if (!awaitable.name) {\n        // Make debuging easier by adding a name to this function.\n        Object.defineProperty(awaitable, 'name', {writable: true});\n        if (typeof bucket === 'string') {\n            awaitable.name = bucket;\n        } else {\n            console.warn(\"Unhandled bucket type (for naming):\", typeof bucket, bucket);\n        }\n    }\n    let inactive;\n    if (!_queueAsyncBuckets.has(bucket)) {\n        _queueAsyncBuckets.set(bucket, []);\n        inactive = true;\n    }\n    const queue = _queueAsyncBuckets.get(bucket);\n    const job = new Promise((resolve, reject) => queue.push({\n        awaitable,\n        resolve,\n        reject\n    }));\n    if (inactive) {\n        /* An executor is not currently active; Start one now. */\n        _asyncQueueExecutor(queue, () => _queueAsyncBuckets.delete(bucket));\n    }\n    return job;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9xdWV1ZV9qb2IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7OztBQUdiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3RELDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZUFBZTtBQUNqRTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9saWJzaWduYWwvc3JjL3F1ZXVlX2pvYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aW06IHRzPTQ6c3c9NDpleHBhbmR0YWJcbiBcbiAvKlxuICAqIGpvYlF1ZXVlIG1hbmFnZXMgbXVsdGlwbGUgcXVldWVzIGluZGV4ZWQgYnkgZGV2aWNlIHRvIHNlcmlhbGl6ZVxuICAqIHNlc3Npb24gaW8gb3BzIG9uIHRoZSBkYXRhYmFzZS5cbiAgKi9cbid1c2Ugc3RyaWN0JztcblxuXG5jb25zdCBfcXVldWVBc3luY0J1Y2tldHMgPSBuZXcgTWFwKCk7XG5jb25zdCBfZ2NMaW1pdCA9IDEwMDAwO1xuXG5hc3luYyBmdW5jdGlvbiBfYXN5bmNRdWV1ZUV4ZWN1dG9yKHF1ZXVlLCBjbGVhbnVwKSB7XG4gICAgbGV0IG9mZnQgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGxldCBsaW1pdCA9IE1hdGgubWluKHF1ZXVlLmxlbmd0aCwgX2djTGltaXQpOyAvLyBCcmVhayB1cCB0aHVuZGVyaW5nIGh1cmRzIGZvciBHQyBkdXR5LlxuICAgICAgICBmb3IgKGxldCBpID0gb2ZmdDsgaSA8IGxpbWl0OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGpvYiA9IHF1ZXVlW2ldO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBqb2IucmVzb2x2ZShhd2FpdCBqb2IuYXdhaXRhYmxlKCkpO1xuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgam9iLnJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPCBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8qIFBlcmZvcm0gbGF6eSBHQyBvZiBxdWV1ZSBmb3IgZmFzdGVyIGl0ZXJhdGlvbi4gKi9cbiAgICAgICAgICAgIGlmIChsaW1pdCA+PSBfZ2NMaW1pdCkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnNwbGljZSgwLCBsaW1pdCk7XG4gICAgICAgICAgICAgICAgb2ZmdCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9mZnQgPSBsaW1pdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFudXAoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihidWNrZXQsIGF3YWl0YWJsZSkge1xuICAgIC8qIFJ1biB0aGUgYXN5bmMgYXdhaXRhYmxlIG9ubHkgd2hlbiBhbGwgb3RoZXIgYXN5bmMgY2FsbHMgcmVnaXN0ZXJlZFxuICAgICAqIGhlcmUgaGF2ZSBjb21wbGV0ZWQgKG9yIHRocm93bikuICBUaGUgYnVja2V0IGFyZ3VtZW50IGlzIGEgaGFzaGFibGVcbiAgICAgKiBrZXkgcmVwcmVzZW50aW5nIHRoZSB0YXNrIHF1ZXVlIHRvIHVzZS4gKi9cbiAgICBpZiAoIWF3YWl0YWJsZS5uYW1lKSB7XG4gICAgICAgIC8vIE1ha2UgZGVidWdpbmcgZWFzaWVyIGJ5IGFkZGluZyBhIG5hbWUgdG8gdGhpcyBmdW5jdGlvbi5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGF3YWl0YWJsZSwgJ25hbWUnLCB7d3JpdGFibGU6IHRydWV9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBidWNrZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhd2FpdGFibGUubmFtZSA9IGJ1Y2tldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVuaGFuZGxlZCBidWNrZXQgdHlwZSAoZm9yIG5hbWluZyk6XCIsIHR5cGVvZiBidWNrZXQsIGJ1Y2tldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGluYWN0aXZlO1xuICAgIGlmICghX3F1ZXVlQXN5bmNCdWNrZXRzLmhhcyhidWNrZXQpKSB7XG4gICAgICAgIF9xdWV1ZUFzeW5jQnVja2V0cy5zZXQoYnVja2V0LCBbXSk7XG4gICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcXVldWUgPSBfcXVldWVBc3luY0J1Y2tldHMuZ2V0KGJ1Y2tldCk7XG4gICAgY29uc3Qgam9iID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gcXVldWUucHVzaCh7XG4gICAgICAgIGF3YWl0YWJsZSxcbiAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0XG4gICAgfSkpO1xuICAgIGlmIChpbmFjdGl2ZSkge1xuICAgICAgICAvKiBBbiBleGVjdXRvciBpcyBub3QgY3VycmVudGx5IGFjdGl2ZTsgU3RhcnQgb25lIG5vdy4gKi9cbiAgICAgICAgX2FzeW5jUXVldWVFeGVjdXRvcihxdWV1ZSwgKCkgPT4gX3F1ZXVlQXN5bmNCdWNrZXRzLmRlbGV0ZShidWNrZXQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGpvYjtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/queue_job.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/session_builder.js":
/*!*******************************************************!*\
  !*** ./node_modules/libsignal/src/session_builder.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst BaseKeyType = __webpack_require__(/*! ./base_key_type */ \"(rsc)/./node_modules/libsignal/src/base_key_type.js\");\nconst ChainType = __webpack_require__(/*! ./chain_type */ \"(rsc)/./node_modules/libsignal/src/chain_type.js\");\nconst SessionRecord = __webpack_require__(/*! ./session_record */ \"(rsc)/./node_modules/libsignal/src/session_record.js\");\nconst crypto = __webpack_require__(/*! ./crypto */ \"(rsc)/./node_modules/libsignal/src/crypto.js\");\nconst curve = __webpack_require__(/*! ./curve */ \"(rsc)/./node_modules/libsignal/src/curve.js\");\nconst errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/libsignal/src/errors.js\");\nconst queueJob = __webpack_require__(/*! ./queue_job */ \"(rsc)/./node_modules/libsignal/src/queue_job.js\");\n\n\nclass SessionBuilder {\n\n    constructor(storage, protocolAddress) {\n        this.addr = protocolAddress;\n        this.storage = storage;\n    }\n\n    async initOutgoing(device) {\n        const fqAddr = this.addr.toString();\n        return await queueJob(fqAddr, async () => {\n            if (!await this.storage.isTrustedIdentity(this.addr.id, device.identityKey)) {\n                throw new errors.UntrustedIdentityKeyError(this.addr.id, device.identityKey);\n            }\n            curve.verifySignature(device.identityKey, device.signedPreKey.publicKey,\n                                  device.signedPreKey.signature, true);\n            const baseKey = curve.generateKeyPair();\n            const devicePreKey = device.preKey && device.preKey.publicKey;\n            const session = await this.initSession(true, baseKey, undefined, device.identityKey,\n                                                   devicePreKey, device.signedPreKey.publicKey,\n                                                   device.registrationId);\n            session.pendingPreKey = {\n                signedKeyId: device.signedPreKey.keyId,\n                baseKey: baseKey.pubKey\n            };\n            if (device.preKey) {\n                session.pendingPreKey.preKeyId = device.preKey.keyId;\n            }\n            let record = await this.storage.loadSession(fqAddr);\n            if (!record) {\n                record = new SessionRecord();\n            } else {\n                const openSession = record.getOpenSession();\n                if (openSession) {\n                    console.warn(\"Closing stale open session for new outgoing prekey bundle\");\n                    record.closeSession(openSession);\n                }\n            }\n            record.setSession(session);\n            await this.storage.storeSession(fqAddr, record);\n        });\n    }\n\n    async initIncoming(record, message) {\n        const fqAddr = this.addr.toString();\n        if (!await this.storage.isTrustedIdentity(fqAddr, message.identityKey)) {\n            throw new errors.UntrustedIdentityKeyError(this.addr.id, message.identityKey);\n        }\n        if (record.getSession(message.baseKey)) {\n            // This just means we haven't replied.\n            return;\n        }\n        const preKeyPair = await this.storage.loadPreKey(message.preKeyId);\n        if (message.preKeyId && !preKeyPair) {\n            throw new errors.PreKeyError('Invalid PreKey ID');\n        }   \n        const signedPreKeyPair = await this.storage.loadSignedPreKey(message.signedPreKeyId);\n        if (!signedPreKeyPair) { \n            throw new errors.PreKeyError(\"Missing SignedPreKey\");\n        }   \n        const existingOpenSession = record.getOpenSession();\n        if (existingOpenSession) {\n            console.warn(\"Closing open session in favor of incoming prekey bundle\");\n            record.closeSession(existingOpenSession);\n        }\n        record.setSession(await this.initSession(false, preKeyPair, signedPreKeyPair,\n                                                 message.identityKey, message.baseKey,\n                                                 undefined, message.registrationId));\n        return message.preKeyId;\n    }\n\n    async initSession(isInitiator, ourEphemeralKey, ourSignedKey, theirIdentityPubKey,\n                      theirEphemeralPubKey, theirSignedPubKey, registrationId) {\n        if (isInitiator) {\n            if (ourSignedKey) {\n                throw new Error(\"Invalid call to initSession\");\n            }\n            ourSignedKey = ourEphemeralKey;\n        } else {\n            if (theirSignedPubKey) {\n                throw new Error(\"Invalid call to initSession\");\n            }\n            theirSignedPubKey = theirEphemeralPubKey;\n        }\n        let sharedSecret;\n        if (!ourEphemeralKey || !theirEphemeralPubKey) {\n            sharedSecret = new Uint8Array(32 * 4);\n        } else {\n            sharedSecret = new Uint8Array(32 * 5);\n        }\n        for (var i = 0; i < 32; i++) {\n            sharedSecret[i] = 0xff;\n        }\n        const ourIdentityKey = await this.storage.getOurIdentity();\n        const a1 = curve.calculateAgreement(theirSignedPubKey, ourIdentityKey.privKey);\n        const a2 = curve.calculateAgreement(theirIdentityPubKey, ourSignedKey.privKey);\n        const a3 = curve.calculateAgreement(theirSignedPubKey, ourSignedKey.privKey);\n        if (isInitiator) {\n            sharedSecret.set(new Uint8Array(a1), 32);\n            sharedSecret.set(new Uint8Array(a2), 32 * 2);\n        } else {\n            sharedSecret.set(new Uint8Array(a1), 32 * 2);\n            sharedSecret.set(new Uint8Array(a2), 32);\n        }\n        sharedSecret.set(new Uint8Array(a3), 32 * 3);\n        if (ourEphemeralKey && theirEphemeralPubKey) {\n            const a4 = curve.calculateAgreement(theirEphemeralPubKey, ourEphemeralKey.privKey);\n            sharedSecret.set(new Uint8Array(a4), 32 * 4);\n        }\n        const masterKey = crypto.deriveSecrets(Buffer.from(sharedSecret), Buffer.alloc(32),\n                                               Buffer.from(\"WhisperText\"));\n        const session = SessionRecord.createEntry();\n        session.registrationId = registrationId;\n        session.currentRatchet = {\n            rootKey: masterKey[0],\n            ephemeralKeyPair: isInitiator ? curve.generateKeyPair() : ourSignedKey,\n            lastRemoteEphemeralKey: theirSignedPubKey,\n            previousCounter: 0\n        };\n        session.indexInfo = {\n            created: Date.now(),\n            used: Date.now(),\n            remoteIdentityKey: theirIdentityPubKey,\n            baseKey: isInitiator ? ourEphemeralKey.pubKey : theirEphemeralPubKey,\n            baseKeyType: isInitiator ? BaseKeyType.OURS : BaseKeyType.THEIRS,\n            closed: -1\n        };\n        if (isInitiator) {\n            // If we're initiating we go ahead and set our first sending ephemeral key now,\n            // otherwise we figure it out when we first maybeStepRatchet with the remote's\n            // ephemeral key\n            this.calculateSendingRatchet(session, theirSignedPubKey);\n        }\n        return session;\n    }\n\n    calculateSendingRatchet(session, remoteKey) {\n        const ratchet = session.currentRatchet;\n        const sharedSecret = curve.calculateAgreement(remoteKey, ratchet.ephemeralKeyPair.privKey);\n        const masterKey = crypto.deriveSecrets(sharedSecret, ratchet.rootKey, Buffer.from(\"WhisperRatchet\"));\n        session.addChain(ratchet.ephemeralKeyPair.pubKey, {\n            messageKeys: {},\n            chainKey: {\n                counter: -1,\n                key: masterKey[1]\n            },\n            chainType: ChainType.SENDING\n        });\n        ratchet.rootKey = masterKey[0];\n    }\n}\n\nmodule.exports = SessionBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGlic2lnbmFsL3NyYy9zZXNzaW9uX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IjtBQUNhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLDRFQUFpQjtBQUM3QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBYztBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQyw4RUFBa0I7QUFDaEQsZUFBZSxtQkFBTyxDQUFDLDhEQUFVO0FBQ2pDLGNBQWMsbUJBQU8sQ0FBQyw0REFBUztBQUMvQixlQUFlLG1CQUFPLENBQUMsOERBQVU7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsb0VBQWE7OztBQUd0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL2xpYnNpZ25hbC9zcmMvc2Vzc2lvbl9idWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBCYXNlS2V5VHlwZSA9IHJlcXVpcmUoJy4vYmFzZV9rZXlfdHlwZScpO1xuY29uc3QgQ2hhaW5UeXBlID0gcmVxdWlyZSgnLi9jaGFpbl90eXBlJyk7XG5jb25zdCBTZXNzaW9uUmVjb3JkID0gcmVxdWlyZSgnLi9zZXNzaW9uX3JlY29yZCcpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnLi9jcnlwdG8nKTtcbmNvbnN0IGN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpO1xuY29uc3QgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbmNvbnN0IHF1ZXVlSm9iID0gcmVxdWlyZSgnLi9xdWV1ZV9qb2InKTtcblxuXG5jbGFzcyBTZXNzaW9uQnVpbGRlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlLCBwcm90b2NvbEFkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5hZGRyID0gcHJvdG9jb2xBZGRyZXNzO1xuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXRPdXRnb2luZyhkZXZpY2UpIHtcbiAgICAgICAgY29uc3QgZnFBZGRyID0gdGhpcy5hZGRyLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBxdWV1ZUpvYihmcUFkZHIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmICghYXdhaXQgdGhpcy5zdG9yYWdlLmlzVHJ1c3RlZElkZW50aXR5KHRoaXMuYWRkci5pZCwgZGV2aWNlLmlkZW50aXR5S2V5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuVW50cnVzdGVkSWRlbnRpdHlLZXlFcnJvcih0aGlzLmFkZHIuaWQsIGRldmljZS5pZGVudGl0eUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJ2ZS52ZXJpZnlTaWduYXR1cmUoZGV2aWNlLmlkZW50aXR5S2V5LCBkZXZpY2Uuc2lnbmVkUHJlS2V5LnB1YmxpY0tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2Uuc2lnbmVkUHJlS2V5LnNpZ25hdHVyZSwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBiYXNlS2V5ID0gY3VydmUuZ2VuZXJhdGVLZXlQYWlyKCk7XG4gICAgICAgICAgICBjb25zdCBkZXZpY2VQcmVLZXkgPSBkZXZpY2UucHJlS2V5ICYmIGRldmljZS5wcmVLZXkucHVibGljS2V5O1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHRoaXMuaW5pdFNlc3Npb24odHJ1ZSwgYmFzZUtleSwgdW5kZWZpbmVkLCBkZXZpY2UuaWRlbnRpdHlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VQcmVLZXksIGRldmljZS5zaWduZWRQcmVLZXkucHVibGljS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlLnJlZ2lzdHJhdGlvbklkKTtcbiAgICAgICAgICAgIHNlc3Npb24ucGVuZGluZ1ByZUtleSA9IHtcbiAgICAgICAgICAgICAgICBzaWduZWRLZXlJZDogZGV2aWNlLnNpZ25lZFByZUtleS5rZXlJZCxcbiAgICAgICAgICAgICAgICBiYXNlS2V5OiBiYXNlS2V5LnB1YktleVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChkZXZpY2UucHJlS2V5KSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5wZW5kaW5nUHJlS2V5LnByZUtleUlkID0gZGV2aWNlLnByZUtleS5rZXlJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZWNvcmQgPSBhd2FpdCB0aGlzLnN0b3JhZ2UubG9hZFNlc3Npb24oZnFBZGRyKTtcbiAgICAgICAgICAgIGlmICghcmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkID0gbmV3IFNlc3Npb25SZWNvcmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3BlblNlc3Npb24gPSByZWNvcmQuZ2V0T3BlblNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAob3BlblNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ2xvc2luZyBzdGFsZSBvcGVuIHNlc3Npb24gZm9yIG5ldyBvdXRnb2luZyBwcmVrZXkgYnVuZGxlXCIpO1xuICAgICAgICAgICAgICAgICAgICByZWNvcmQuY2xvc2VTZXNzaW9uKG9wZW5TZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmQuc2V0U2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZS5zdG9yZVNlc3Npb24oZnFBZGRyLCByZWNvcmQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0SW5jb21pbmcocmVjb3JkLCBtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGZxQWRkciA9IHRoaXMuYWRkci50b1N0cmluZygpO1xuICAgICAgICBpZiAoIWF3YWl0IHRoaXMuc3RvcmFnZS5pc1RydXN0ZWRJZGVudGl0eShmcUFkZHIsIG1lc3NhZ2UuaWRlbnRpdHlLZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLlVudHJ1c3RlZElkZW50aXR5S2V5RXJyb3IodGhpcy5hZGRyLmlkLCBtZXNzYWdlLmlkZW50aXR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjb3JkLmdldFNlc3Npb24obWVzc2FnZS5iYXNlS2V5KSkge1xuICAgICAgICAgICAgLy8gVGhpcyBqdXN0IG1lYW5zIHdlIGhhdmVuJ3QgcmVwbGllZC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmVLZXlQYWlyID0gYXdhaXQgdGhpcy5zdG9yYWdlLmxvYWRQcmVLZXkobWVzc2FnZS5wcmVLZXlJZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnByZUtleUlkICYmICFwcmVLZXlQYWlyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLlByZUtleUVycm9yKCdJbnZhbGlkIFByZUtleSBJRCcpO1xuICAgICAgICB9ICAgXG4gICAgICAgIGNvbnN0IHNpZ25lZFByZUtleVBhaXIgPSBhd2FpdCB0aGlzLnN0b3JhZ2UubG9hZFNpZ25lZFByZUtleShtZXNzYWdlLnNpZ25lZFByZUtleUlkKTtcbiAgICAgICAgaWYgKCFzaWduZWRQcmVLZXlQYWlyKSB7IFxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5QcmVLZXlFcnJvcihcIk1pc3NpbmcgU2lnbmVkUHJlS2V5XCIpO1xuICAgICAgICB9ICAgXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nT3BlblNlc3Npb24gPSByZWNvcmQuZ2V0T3BlblNlc3Npb24oKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nT3BlblNlc3Npb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNsb3Npbmcgb3BlbiBzZXNzaW9uIGluIGZhdm9yIG9mIGluY29taW5nIHByZWtleSBidW5kbGVcIik7XG4gICAgICAgICAgICByZWNvcmQuY2xvc2VTZXNzaW9uKGV4aXN0aW5nT3BlblNlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIHJlY29yZC5zZXRTZXNzaW9uKGF3YWl0IHRoaXMuaW5pdFNlc3Npb24oZmFsc2UsIHByZUtleVBhaXIsIHNpZ25lZFByZUtleVBhaXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZGVudGl0eUtleSwgbWVzc2FnZS5iYXNlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgbWVzc2FnZS5yZWdpc3RyYXRpb25JZCkpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5wcmVLZXlJZDtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0U2Vzc2lvbihpc0luaXRpYXRvciwgb3VyRXBoZW1lcmFsS2V5LCBvdXJTaWduZWRLZXksIHRoZWlySWRlbnRpdHlQdWJLZXksXG4gICAgICAgICAgICAgICAgICAgICAgdGhlaXJFcGhlbWVyYWxQdWJLZXksIHRoZWlyU2lnbmVkUHViS2V5LCByZWdpc3RyYXRpb25JZCkge1xuICAgICAgICBpZiAoaXNJbml0aWF0b3IpIHtcbiAgICAgICAgICAgIGlmIChvdXJTaWduZWRLZXkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNhbGwgdG8gaW5pdFNlc3Npb25cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXJTaWduZWRLZXkgPSBvdXJFcGhlbWVyYWxLZXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhlaXJTaWduZWRQdWJLZXkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNhbGwgdG8gaW5pdFNlc3Npb25cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGVpclNpZ25lZFB1YktleSA9IHRoZWlyRXBoZW1lcmFsUHViS2V5O1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaGFyZWRTZWNyZXQ7XG4gICAgICAgIGlmICghb3VyRXBoZW1lcmFsS2V5IHx8ICF0aGVpckVwaGVtZXJhbFB1YktleSkge1xuICAgICAgICAgICAgc2hhcmVkU2VjcmV0ID0gbmV3IFVpbnQ4QXJyYXkoMzIgKiA0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYXJlZFNlY3JldCA9IG5ldyBVaW50OEFycmF5KDMyICogNSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgICAgICBzaGFyZWRTZWNyZXRbaV0gPSAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91cklkZW50aXR5S2V5ID0gYXdhaXQgdGhpcy5zdG9yYWdlLmdldE91cklkZW50aXR5KCk7XG4gICAgICAgIGNvbnN0IGExID0gY3VydmUuY2FsY3VsYXRlQWdyZWVtZW50KHRoZWlyU2lnbmVkUHViS2V5LCBvdXJJZGVudGl0eUtleS5wcml2S2V5KTtcbiAgICAgICAgY29uc3QgYTIgPSBjdXJ2ZS5jYWxjdWxhdGVBZ3JlZW1lbnQodGhlaXJJZGVudGl0eVB1YktleSwgb3VyU2lnbmVkS2V5LnByaXZLZXkpO1xuICAgICAgICBjb25zdCBhMyA9IGN1cnZlLmNhbGN1bGF0ZUFncmVlbWVudCh0aGVpclNpZ25lZFB1YktleSwgb3VyU2lnbmVkS2V5LnByaXZLZXkpO1xuICAgICAgICBpZiAoaXNJbml0aWF0b3IpIHtcbiAgICAgICAgICAgIHNoYXJlZFNlY3JldC5zZXQobmV3IFVpbnQ4QXJyYXkoYTEpLCAzMik7XG4gICAgICAgICAgICBzaGFyZWRTZWNyZXQuc2V0KG5ldyBVaW50OEFycmF5KGEyKSwgMzIgKiAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYXJlZFNlY3JldC5zZXQobmV3IFVpbnQ4QXJyYXkoYTEpLCAzMiAqIDIpO1xuICAgICAgICAgICAgc2hhcmVkU2VjcmV0LnNldChuZXcgVWludDhBcnJheShhMiksIDMyKTtcbiAgICAgICAgfVxuICAgICAgICBzaGFyZWRTZWNyZXQuc2V0KG5ldyBVaW50OEFycmF5KGEzKSwgMzIgKiAzKTtcbiAgICAgICAgaWYgKG91ckVwaGVtZXJhbEtleSAmJiB0aGVpckVwaGVtZXJhbFB1YktleSkge1xuICAgICAgICAgICAgY29uc3QgYTQgPSBjdXJ2ZS5jYWxjdWxhdGVBZ3JlZW1lbnQodGhlaXJFcGhlbWVyYWxQdWJLZXksIG91ckVwaGVtZXJhbEtleS5wcml2S2V5KTtcbiAgICAgICAgICAgIHNoYXJlZFNlY3JldC5zZXQobmV3IFVpbnQ4QXJyYXkoYTQpLCAzMiAqIDQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hc3RlcktleSA9IGNyeXB0by5kZXJpdmVTZWNyZXRzKEJ1ZmZlci5mcm9tKHNoYXJlZFNlY3JldCksIEJ1ZmZlci5hbGxvYygzMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlci5mcm9tKFwiV2hpc3BlclRleHRcIikpO1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gU2Vzc2lvblJlY29yZC5jcmVhdGVFbnRyeSgpO1xuICAgICAgICBzZXNzaW9uLnJlZ2lzdHJhdGlvbklkID0gcmVnaXN0cmF0aW9uSWQ7XG4gICAgICAgIHNlc3Npb24uY3VycmVudFJhdGNoZXQgPSB7XG4gICAgICAgICAgICByb290S2V5OiBtYXN0ZXJLZXlbMF0sXG4gICAgICAgICAgICBlcGhlbWVyYWxLZXlQYWlyOiBpc0luaXRpYXRvciA/IGN1cnZlLmdlbmVyYXRlS2V5UGFpcigpIDogb3VyU2lnbmVkS2V5LFxuICAgICAgICAgICAgbGFzdFJlbW90ZUVwaGVtZXJhbEtleTogdGhlaXJTaWduZWRQdWJLZXksXG4gICAgICAgICAgICBwcmV2aW91c0NvdW50ZXI6IDBcbiAgICAgICAgfTtcbiAgICAgICAgc2Vzc2lvbi5pbmRleEluZm8gPSB7XG4gICAgICAgICAgICBjcmVhdGVkOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgdXNlZDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIHJlbW90ZUlkZW50aXR5S2V5OiB0aGVpcklkZW50aXR5UHViS2V5LFxuICAgICAgICAgICAgYmFzZUtleTogaXNJbml0aWF0b3IgPyBvdXJFcGhlbWVyYWxLZXkucHViS2V5IDogdGhlaXJFcGhlbWVyYWxQdWJLZXksXG4gICAgICAgICAgICBiYXNlS2V5VHlwZTogaXNJbml0aWF0b3IgPyBCYXNlS2V5VHlwZS5PVVJTIDogQmFzZUtleVR5cGUuVEhFSVJTLFxuICAgICAgICAgICAgY2xvc2VkOiAtMVxuICAgICAgICB9O1xuICAgICAgICBpZiAoaXNJbml0aWF0b3IpIHtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIGluaXRpYXRpbmcgd2UgZ28gYWhlYWQgYW5kIHNldCBvdXIgZmlyc3Qgc2VuZGluZyBlcGhlbWVyYWwga2V5IG5vdyxcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBmaWd1cmUgaXQgb3V0IHdoZW4gd2UgZmlyc3QgbWF5YmVTdGVwUmF0Y2hldCB3aXRoIHRoZSByZW1vdGUnc1xuICAgICAgICAgICAgLy8gZXBoZW1lcmFsIGtleVxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVTZW5kaW5nUmF0Y2hldChzZXNzaW9uLCB0aGVpclNpZ25lZFB1YktleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlU2VuZGluZ1JhdGNoZXQoc2Vzc2lvbiwgcmVtb3RlS2V5KSB7XG4gICAgICAgIGNvbnN0IHJhdGNoZXQgPSBzZXNzaW9uLmN1cnJlbnRSYXRjaGV0O1xuICAgICAgICBjb25zdCBzaGFyZWRTZWNyZXQgPSBjdXJ2ZS5jYWxjdWxhdGVBZ3JlZW1lbnQocmVtb3RlS2V5LCByYXRjaGV0LmVwaGVtZXJhbEtleVBhaXIucHJpdktleSk7XG4gICAgICAgIGNvbnN0IG1hc3RlcktleSA9IGNyeXB0by5kZXJpdmVTZWNyZXRzKHNoYXJlZFNlY3JldCwgcmF0Y2hldC5yb290S2V5LCBCdWZmZXIuZnJvbShcIldoaXNwZXJSYXRjaGV0XCIpKTtcbiAgICAgICAgc2Vzc2lvbi5hZGRDaGFpbihyYXRjaGV0LmVwaGVtZXJhbEtleVBhaXIucHViS2V5LCB7XG4gICAgICAgICAgICBtZXNzYWdlS2V5czoge30sXG4gICAgICAgICAgICBjaGFpbktleToge1xuICAgICAgICAgICAgICAgIGNvdW50ZXI6IC0xLFxuICAgICAgICAgICAgICAgIGtleTogbWFzdGVyS2V5WzFdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhaW5UeXBlOiBDaGFpblR5cGUuU0VORElOR1xuICAgICAgICB9KTtcbiAgICAgICAgcmF0Y2hldC5yb290S2V5ID0gbWFzdGVyS2V5WzBdO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZXNzaW9uQnVpbGRlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/session_builder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/session_cipher.js":
/*!******************************************************!*\
  !*** ./node_modules/libsignal/src/session_cipher.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// vim: ts=4:sw=4:expandtab\n\nconst ChainType = __webpack_require__(/*! ./chain_type */ \"(rsc)/./node_modules/libsignal/src/chain_type.js\");\nconst ProtocolAddress = __webpack_require__(/*! ./protocol_address */ \"(rsc)/./node_modules/libsignal/src/protocol_address.js\");\nconst SessionBuilder = __webpack_require__(/*! ./session_builder */ \"(rsc)/./node_modules/libsignal/src/session_builder.js\");\nconst SessionRecord = __webpack_require__(/*! ./session_record */ \"(rsc)/./node_modules/libsignal/src/session_record.js\");\nconst crypto = __webpack_require__(/*! ./crypto */ \"(rsc)/./node_modules/libsignal/src/crypto.js\");\nconst curve = __webpack_require__(/*! ./curve */ \"(rsc)/./node_modules/libsignal/src/curve.js\");\nconst errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/libsignal/src/errors.js\");\nconst protobufs = __webpack_require__(/*! ./protobufs */ \"(rsc)/./node_modules/libsignal/src/protobufs.js\");\nconst queueJob = __webpack_require__(/*! ./queue_job */ \"(rsc)/./node_modules/libsignal/src/queue_job.js\");\n\nconst VERSION = 3;\n\nfunction assertBuffer(value) {\n    if (!(value instanceof Buffer)) {\n        throw TypeError(`Expected Buffer instead of: ${value.constructor.name}`);\n    }\n    return value;\n}\n\n\nclass SessionCipher {\n\n    constructor(storage, protocolAddress) {\n        if (!(protocolAddress instanceof ProtocolAddress)) {\n            throw new TypeError(\"protocolAddress must be a ProtocolAddress\");\n        }\n        this.addr = protocolAddress;\n        this.storage = storage;\n    }\n\n    _encodeTupleByte(number1, number2) {\n        if (number1 > 15 || number2 > 15) {\n            throw TypeError(\"Numbers must be 4 bits or less\");\n        }\n        return (number1 << 4) | number2;\n    }\n\n    _decodeTupleByte(byte) {\n        return [byte >> 4, byte & 0xf];\n    }\n\n    toString() {\n        return `<SessionCipher(${this.addr.toString()})>`;\n    }\n\n    async getRecord() {\n        const record = await this.storage.loadSession(this.addr.toString());\n        if (record && !(record instanceof SessionRecord)) {\n            throw new TypeError('SessionRecord type expected from loadSession'); \n        }\n        return record;\n    }\n\n    async storeRecord(record) {\n        record.removeOldSessions();\n        await this.storage.storeSession(this.addr.toString(), record);\n    }\n\n    async queueJob(awaitable) {\n        return await queueJob(this.addr.toString(), awaitable);\n    }\n\n    async encrypt(data) {\n        assertBuffer(data);\n        const ourIdentityKey = await this.storage.getOurIdentity();\n        return await this.queueJob(async () => {\n            const record = await this.getRecord();\n            if (!record) {\n                throw new errors.SessionError(\"No sessions\");\n            }\n            const session = record.getOpenSession();\n            if (!session) {\n                throw new errors.SessionError(\"No open session\");\n            }\n            const remoteIdentityKey = session.indexInfo.remoteIdentityKey;\n            if (!await this.storage.isTrustedIdentity(this.addr.id, remoteIdentityKey)) {\n                throw new errors.UntrustedIdentityKeyError(this.addr.id, remoteIdentityKey);\n            }\n            const chain = session.getChain(session.currentRatchet.ephemeralKeyPair.pubKey);\n            if (chain.chainType === ChainType.RECEIVING) {\n                throw new Error(\"Tried to encrypt on a receiving chain\");\n            }\n            this.fillMessageKeys(chain, chain.chainKey.counter + 1);\n            const keys = crypto.deriveSecrets(chain.messageKeys[chain.chainKey.counter],\n                                              Buffer.alloc(32), Buffer.from(\"WhisperMessageKeys\"));\n            delete chain.messageKeys[chain.chainKey.counter];\n            const msg = protobufs.WhisperMessage.create();\n            msg.ephemeralKey = session.currentRatchet.ephemeralKeyPair.pubKey;\n            msg.counter = chain.chainKey.counter;\n            msg.previousCounter = session.currentRatchet.previousCounter;\n            msg.ciphertext = crypto.encrypt(keys[0], data, keys[2].slice(0, 16));\n            const msgBuf = protobufs.WhisperMessage.encode(msg).finish();\n            const macInput = Buffer.alloc(msgBuf.byteLength + (33 * 2) + 1);\n            macInput.set(ourIdentityKey.pubKey);\n            macInput.set(session.indexInfo.remoteIdentityKey, 33);\n            macInput[33 * 2] = this._encodeTupleByte(VERSION, VERSION);\n            macInput.set(msgBuf, (33 * 2) + 1);\n            const mac = crypto.calculateMAC(keys[1], macInput);\n            const result = Buffer.alloc(msgBuf.byteLength + 9);\n            result[0] = this._encodeTupleByte(VERSION, VERSION);\n            result.set(msgBuf, 1);\n            result.set(mac.slice(0, 8), msgBuf.byteLength + 1);\n            await this.storeRecord(record);\n            let type, body;\n            if (session.pendingPreKey) {\n                type = 3;  // prekey bundle\n                const preKeyMsg = protobufs.PreKeyWhisperMessage.create({\n                    identityKey: ourIdentityKey.pubKey,\n                    registrationId: await this.storage.getOurRegistrationId(),\n                    baseKey: session.pendingPreKey.baseKey,\n                    signedPreKeyId: session.pendingPreKey.signedKeyId,\n                    message: result\n                });\n                if (session.pendingPreKey.preKeyId) {\n                    preKeyMsg.preKeyId = session.pendingPreKey.preKeyId;\n                }\n                body = Buffer.concat([\n                    Buffer.from([this._encodeTupleByte(VERSION, VERSION)]),\n                    Buffer.from(\n                        protobufs.PreKeyWhisperMessage.encode(preKeyMsg).finish()\n                    )\n                ]);\n            } else {\n                type = 1;  // normal\n                body = result;\n            }\n            return {\n                type,\n                body,\n                registrationId: session.registrationId\n            };\n        });\n    }\n\n    async decryptWithSessions(data, sessions) {\n        // Iterate through the sessions, attempting to decrypt using each one.\n        // Stop and return the result if we get a valid result.\n        if (!sessions.length) {\n            throw new errors.SessionError(\"No sessions available\");\n        }   \n        const errs = [];\n        for (const session of sessions) {\n            let plaintext; \n            try {\n                plaintext = await this.doDecryptWhisperMessage(data, session);\n                session.indexInfo.used = Date.now();\n                return {\n                    session,\n                    plaintext\n                };\n            } catch(e) {\n                errs.push(e);\n            }\n        }\n        console.error(\"Failed to decrypt message with any known session...\");\n        for (const e of errs) {\n            console.error(\"Session error:\" + e, e.stack);\n        }\n        throw new errors.SessionError(\"No matching sessions found for message\");\n    }\n\n    async decryptWhisperMessage(data) {\n        assertBuffer(data);\n        return await this.queueJob(async () => {\n            const record = await this.getRecord();\n            if (!record) {\n                throw new errors.SessionError(\"No session record\");\n            }\n            const result = await this.decryptWithSessions(data, record.getSessions());\n            const remoteIdentityKey = result.session.indexInfo.remoteIdentityKey;\n            if (!await this.storage.isTrustedIdentity(this.addr.id, remoteIdentityKey)) {\n                throw new errors.UntrustedIdentityKeyError(this.addr.id, remoteIdentityKey);\n            }   \n            if (record.isClosed(result.session)) {\n                // It's possible for this to happen when processing a backlog of messages.\n                // The message was, hopefully, just sent back in a time when this session\n                // was the most current.  Simply make a note of it and continue.  If our\n                // actual open session is for reason invalid, that must be handled via\n                // a full SessionError response.\n                console.warn(\"Decrypted message with closed session.\");\n            }\n            await this.storeRecord(record);\n            return result.plaintext;\n        });\n    }\n\n    async decryptPreKeyWhisperMessage(data) {\n        assertBuffer(data);\n        const versions = this._decodeTupleByte(data[0]);\n        if (versions[1] > 3 || versions[0] < 3) {  // min version > 3 or max version < 3\n            throw new Error(\"Incompatible version number on PreKeyWhisperMessage\");\n        }\n        return await this.queueJob(async () => {\n            let record = await this.getRecord();\n            const preKeyProto = protobufs.PreKeyWhisperMessage.decode(data.slice(1));\n            if (!record) {\n                if (preKeyProto.registrationId == null) {\n                    throw new Error(\"No registrationId\");\n                }\n                record = new SessionRecord();\n            }\n            const builder = new SessionBuilder(this.storage, this.addr);\n            const preKeyId = await builder.initIncoming(record, preKeyProto);\n            const session = record.getSession(preKeyProto.baseKey);\n            const plaintext = await this.doDecryptWhisperMessage(preKeyProto.message, session);\n            await this.storeRecord(record);\n            if (preKeyId) {\n                await this.storage.removePreKey(preKeyId);\n            }\n            return plaintext;\n        });\n    }\n\n    async doDecryptWhisperMessage(messageBuffer, session) {\n        assertBuffer(messageBuffer);\n        if (!session) {\n            throw new TypeError(\"session required\");\n        }\n        const versions = this._decodeTupleByte(messageBuffer[0]);\n        if (versions[1] > 3 || versions[0] < 3) {  // min version > 3 or max version < 3\n            throw new Error(\"Incompatible version number on WhisperMessage\");\n        }\n        const messageProto = messageBuffer.slice(1, -8);\n        const message = protobufs.WhisperMessage.decode(messageProto);\n        this.maybeStepRatchet(session, message.ephemeralKey, message.previousCounter);\n        const chain = session.getChain(message.ephemeralKey);\n        if (chain.chainType === ChainType.SENDING) {\n            throw new Error(\"Tried to decrypt on a sending chain\");\n        }\n        this.fillMessageKeys(chain, message.counter);\n        if (!chain.messageKeys.hasOwnProperty(message.counter)) {\n            // Most likely the message was already decrypted and we are trying to process\n            // twice.  This can happen if the user restarts before the server gets an ACK.\n            throw new errors.MessageCounterError('Key used already or never filled');\n        }\n        const messageKey = chain.messageKeys[message.counter];\n        delete chain.messageKeys[message.counter];\n        const keys = crypto.deriveSecrets(messageKey, Buffer.alloc(32),\n                                          Buffer.from(\"WhisperMessageKeys\"));\n        const ourIdentityKey = await this.storage.getOurIdentity();\n        const macInput = Buffer.alloc(messageProto.byteLength + (33 * 2) + 1);\n        macInput.set(session.indexInfo.remoteIdentityKey);\n        macInput.set(ourIdentityKey.pubKey, 33);\n        macInput[33 * 2] = this._encodeTupleByte(VERSION, VERSION);\n        macInput.set(messageProto, (33 * 2) + 1);\n        // This is where we most likely fail if the session is not a match.\n        // Don't misinterpret this as corruption.\n        crypto.verifyMAC(macInput, keys[1], messageBuffer.slice(-8), 8);\n        const plaintext = crypto.decrypt(keys[0], message.ciphertext, keys[2].slice(0, 16));\n        delete session.pendingPreKey;\n        return plaintext;\n    }\n\n    fillMessageKeys(chain, counter) {\n        if (chain.chainKey.counter >= counter) {\n            return;\n        }\n        if (counter - chain.chainKey.counter > 2000) {\n            throw new errors.SessionError('Over 2000 messages into the future!');\n        }\n        if (chain.chainKey.key === undefined) {\n            throw new errors.SessionError('Chain closed');\n        }\n        const key = chain.chainKey.key;\n        chain.messageKeys[chain.chainKey.counter + 1] = crypto.calculateMAC(key, Buffer.from([1]));\n        chain.chainKey.key = crypto.calculateMAC(key, Buffer.from([2]));\n        chain.chainKey.counter += 1;\n        return this.fillMessageKeys(chain, counter);\n    }\n\n    maybeStepRatchet(session, remoteKey, previousCounter) {\n        if (session.getChain(remoteKey)) {\n            return;\n        }\n        const ratchet = session.currentRatchet;\n        let previousRatchet = session.getChain(ratchet.lastRemoteEphemeralKey);\n        if (previousRatchet) {\n            this.fillMessageKeys(previousRatchet, previousCounter);\n            delete previousRatchet.chainKey.key;  // Close\n        }\n        this.calculateRatchet(session, remoteKey, false);\n        // Now swap the ephemeral key and calculate the new sending chain\n        const prevCounter = session.getChain(ratchet.ephemeralKeyPair.pubKey);\n        if (prevCounter) {\n            ratchet.previousCounter = prevCounter.chainKey.counter;\n            session.deleteChain(ratchet.ephemeralKeyPair.pubKey);\n        }\n        ratchet.ephemeralKeyPair = curve.generateKeyPair();\n        this.calculateRatchet(session, remoteKey, true);\n        ratchet.lastRemoteEphemeralKey = remoteKey;\n    }\n\n    calculateRatchet(session, remoteKey, sending) {\n        let ratchet = session.currentRatchet;\n        const sharedSecret = curve.calculateAgreement(remoteKey, ratchet.ephemeralKeyPair.privKey);\n        const masterKey = crypto.deriveSecrets(sharedSecret, ratchet.rootKey,\n                                               Buffer.from(\"WhisperRatchet\"), /*chunks*/ 2);\n        const chainKey = sending ? ratchet.ephemeralKeyPair.pubKey : remoteKey;\n        session.addChain(chainKey, {\n            messageKeys: {},\n            chainKey: {\n                counter: -1,\n                key: masterKey[1]\n            },\n            chainType: sending ? ChainType.SENDING : ChainType.RECEIVING\n        });\n        ratchet.rootKey = masterKey[0];\n    }\n\n    async hasOpenSession() {\n        return await this.queueJob(async () => {\n            const record = await this.getRecord();\n            if (!record) {\n                return false;\n            }\n            return record.haveOpenSession();\n        });\n    }\n\n    async closeOpenSession() {\n        return await this.queueJob(async () => {\n            const record = await this.getRecord();\n            if (record) {\n                const openSession = record.getOpenSession();\n                if (openSession) {\n                    record.closeSession(openSession);\n                    await this.storeRecord(record);\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = SessionCipher;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/session_cipher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/libsignal/src/session_record.js":
/*!******************************************************!*\
  !*** ./node_modules/libsignal/src/session_record.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// vim: ts=4:sw=4\n\nconst BaseKeyType = __webpack_require__(/*! ./base_key_type */ \"(rsc)/./node_modules/libsignal/src/base_key_type.js\");\n\nconst CLOSED_SESSIONS_MAX = 40;\nconst SESSION_RECORD_VERSION = 'v1';\n\nfunction assertBuffer(value) {\n    if (!Buffer.isBuffer(value)) {\n        throw new TypeError(\"Buffer required\");\n    }\n}\n\n\nclass SessionEntry {\n\n    constructor() {\n        this._chains = {};\n    }\n\n    toString() {\n        const baseKey = this.indexInfo && this.indexInfo.baseKey &&\n            this.indexInfo.baseKey.toString('base64');\n        return `<SessionEntry [baseKey=${baseKey}]>`;\n    }\n\n    inspect() {\n        return this.toString();\n    }\n\n    addChain(key, value) {\n        assertBuffer(key);\n        const id = key.toString('base64');\n        if (this._chains.hasOwnProperty(id)) {\n            throw new Error(\"Overwrite attempt\");\n        }\n        this._chains[id] = value;\n    }\n\n    getChain(key) {\n        assertBuffer(key);\n        return this._chains[key.toString('base64')];\n    }\n\n    deleteChain(key) {\n        assertBuffer(key);\n        const id = key.toString('base64');\n        if (!this._chains.hasOwnProperty(id)) {\n            throw new ReferenceError(\"Not Found\");\n        }\n        delete this._chains[id];\n    }\n\n    *chains() {\n        for (const [k, v] of Object.entries(this._chains)) {\n            yield [Buffer.from(k, 'base64'), v];\n        }\n    }\n\n    serialize() {\n        const data = {\n            registrationId: this.registrationId,\n            currentRatchet: {\n                ephemeralKeyPair: {\n                    pubKey: this.currentRatchet.ephemeralKeyPair.pubKey.toString('base64'),\n                    privKey: this.currentRatchet.ephemeralKeyPair.privKey.toString('base64')\n                },\n                lastRemoteEphemeralKey: this.currentRatchet.lastRemoteEphemeralKey.toString('base64'),\n                previousCounter: this.currentRatchet.previousCounter,\n                rootKey: this.currentRatchet.rootKey.toString('base64')\n            },\n            indexInfo: {\n                baseKey: this.indexInfo.baseKey.toString('base64'),\n                baseKeyType: this.indexInfo.baseKeyType,\n                closed: this.indexInfo.closed,\n                used: this.indexInfo.used,\n                created: this.indexInfo.created,\n                remoteIdentityKey: this.indexInfo.remoteIdentityKey.toString('base64')\n            },\n            _chains: this._serialize_chains(this._chains)\n        };\n        if (this.pendingPreKey) {\n            data.pendingPreKey = Object.assign({}, this.pendingPreKey);\n            data.pendingPreKey.baseKey = this.pendingPreKey.baseKey.toString('base64');\n        }\n        return data;\n    }\n\n    static deserialize(data) {\n        const obj = new this();\n        obj.registrationId = data.registrationId;\n        obj.currentRatchet = {\n            ephemeralKeyPair: {\n                pubKey: Buffer.from(data.currentRatchet.ephemeralKeyPair.pubKey, 'base64'),\n                privKey: Buffer.from(data.currentRatchet.ephemeralKeyPair.privKey, 'base64')\n            },\n            lastRemoteEphemeralKey: Buffer.from(data.currentRatchet.lastRemoteEphemeralKey, 'base64'),\n            previousCounter: data.currentRatchet.previousCounter,\n            rootKey: Buffer.from(data.currentRatchet.rootKey, 'base64')\n        };\n        obj.indexInfo = {\n            baseKey: Buffer.from(data.indexInfo.baseKey, 'base64'),\n            baseKeyType: data.indexInfo.baseKeyType,\n            closed: data.indexInfo.closed,\n            used: data.indexInfo.used,\n            created: data.indexInfo.created,\n            remoteIdentityKey: Buffer.from(data.indexInfo.remoteIdentityKey, 'base64')\n        };\n        obj._chains = this._deserialize_chains(data._chains);\n        if (data.pendingPreKey) {\n            obj.pendingPreKey = Object.assign({}, data.pendingPreKey);\n            obj.pendingPreKey.baseKey = Buffer.from(data.pendingPreKey.baseKey, 'base64');\n        }\n        return obj;\n    }\n\n    _serialize_chains(chains) {\n        const r = {};\n        for (const key of Object.keys(chains)) {\n            const c = chains[key];\n            const messageKeys = {};\n            for (const [idx, key] of Object.entries(c.messageKeys)) {\n                messageKeys[idx] = key.toString('base64');\n            }\n            r[key] = {\n                chainKey: {\n                    counter: c.chainKey.counter,\n                    key: c.chainKey.key && c.chainKey.key.toString('base64')\n                },\n                chainType: c.chainType,\n                messageKeys: messageKeys\n            };\n        }\n        return r;\n    }\n\n    static _deserialize_chains(chains_data) {\n        const r = {};\n        for (const key of Object.keys(chains_data)) {\n            const c = chains_data[key];\n            const messageKeys = {};\n            for (const [idx, key] of Object.entries(c.messageKeys)) {\n                messageKeys[idx] = Buffer.from(key, 'base64');\n            }\n            r[key] = {\n                chainKey: {\n                    counter: c.chainKey.counter,\n                    key: c.chainKey.key && Buffer.from(c.chainKey.key, 'base64')\n                },\n                chainType: c.chainType,\n                messageKeys: messageKeys\n            };\n        }\n        return r;\n    }\n\n}\n\n\nconst migrations = [{\n    version: 'v1',\n    migrate: function migrateV1(data) {\n        const sessions = data._sessions;\n        if (data.registrationId) {\n            for (const key in sessions) {\n                if (!sessions[key].registrationId) {\n                    sessions[key].registrationId = data.registrationId;\n                }\n            }\n        } else {\n            for (const key in sessions) {\n                if (sessions[key].indexInfo.closed === -1) {\n                    console.error('V1 session storage migration error: registrationId',\n                                  data.registrationId, 'for open session version',\n                                  data.version);\n                }\n            }\n        }\n    }\n}];\n\n\nclass SessionRecord {\n\n    static createEntry() {\n        return new SessionEntry();\n    }\n\n    static migrate(data) {\n        let run = (data.version === undefined);\n        for (let i = 0; i < migrations.length; ++i) {\n            if (run) {\n                console.info(\"Migrating session to:\", migrations[i].version);\n                migrations[i].migrate(data);\n            } else if (migrations[i].version === data.version) {\n                run = true;\n            }\n        }\n        if (!run) {\n            throw new Error(\"Error migrating SessionRecord\");\n        }\n    }\n\n    static deserialize(data) {\n        if (data.version !== SESSION_RECORD_VERSION) {\n            this.migrate(data);\n        }\n        const obj = new this();\n        if (data._sessions) {\n            for (const [key, entry] of Object.entries(data._sessions)) {\n                obj.sessions[key] = SessionEntry.deserialize(entry);\n            }\n        }\n        return obj;\n    }\n\n    constructor() {\n        this.sessions = {};\n        this.version = SESSION_RECORD_VERSION;\n    }\n\n    serialize() {\n        const _sessions = {};\n        for (const [key, entry] of Object.entries(this.sessions)) {\n            _sessions[key] = entry.serialize();\n        }\n        return {\n            _sessions,\n            version: this.version\n        };\n    }\n\n    haveOpenSession() {\n        const openSession = this.getOpenSession();\n        return (!!openSession && typeof openSession.registrationId === 'number');\n    }\n\n    getSession(key) {\n        assertBuffer(key);\n        const session = this.sessions[key.toString('base64')];\n        if (session && session.indexInfo.baseKeyType === BaseKeyType.OURS) {\n            throw new Error(\"Tried to lookup a session using our basekey\");\n        }\n        return session;\n    }\n\n    getOpenSession() {\n        for (const session of Object.values(this.sessions)) {\n            if (!this.isClosed(session)) {\n                return session;\n            }\n        }\n    }\n\n    setSession(session) {\n        this.sessions[session.indexInfo.baseKey.toString('base64')] = session;\n    }\n\n    getSessions() {\n        // Return sessions ordered with most recently used first.\n        return Array.from(Object.values(this.sessions)).sort((a, b) => {\n            const aUsed = a.indexInfo.used || 0;\n            const bUsed = b.indexInfo.used || 0;\n            return aUsed === bUsed ? 0 : aUsed < bUsed ? 1 : -1;\n        });\n    }\n\n    closeSession(session) {\n        if (this.isClosed(session)) {\n            console.warn(\"Session already closed\", session);\n            return;\n        }\n        console.info(\"Closing session:\", session);\n        session.indexInfo.closed = Date.now();\n    }\n\n    openSession(session) {\n        if (!this.isClosed(session)) {\n            console.warn(\"Session already open\");\n        }\n        console.info(\"Opening session:\", session);\n        session.indexInfo.closed = -1;\n    }\n\n    isClosed(session) {\n        return session.indexInfo.closed !== -1;\n    }\n\n    removeOldSessions() {\n        while (Object.keys(this.sessions).length > CLOSED_SESSIONS_MAX) {\n            let oldestKey;\n            let oldestSession;\n            for (const [key, session] of Object.entries(this.sessions)) {\n                if (session.indexInfo.closed !== -1 &&\n                    (!oldestSession || session.indexInfo.closed < oldestSession.indexInfo.closed)) {\n                    oldestKey = key;\n                    oldestSession = session;\n                }\n            }\n            if (oldestKey) {\n                console.info(\"Removing old closed session:\", oldestSession);\n                delete this.sessions[oldestKey];\n            } else {\n                throw new Error('Corrupt sessions object');\n            }\n        }\n    }\n\n    deleteAllSessions() {\n        for (const key of Object.keys(this.sessions)) {\n            delete this.sessions[key];\n        }\n    }\n}\n\nmodule.exports = SessionRecord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/libsignal/src/session_record.js\n");

/***/ })

};
;